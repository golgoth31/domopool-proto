// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: domopool.proto

package domopool_proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayLight uint32 `protobuf:"varint,1,opt,name=day_light,json=dayLight,proto3" json:"day_light,omitempty"` // 3600 if daylight is observed or 0 if not
	Server   string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Timezone uint32 `protobuf:"varint,3,opt,name=timezone,proto3" json:"timezone,omitempty"` // UTC offset in s: UTC+1=3600
}

func (x *NTP) Reset() {
	*x = NTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NTP) ProtoMessage() {}

func (x *NTP) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NTP.ProtoReflect.Descriptor instead.
func (*NTP) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{0}
}

func (x *NTP) GetDayLight() uint32 {
	if x != nil {
		return x.DayLight
	}
	return 0
}

func (x *NTP) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *NTP) GetTimezone() uint32 {
	if x != nil {
		return x.Timezone
	}
	return 0
}

type Mqtt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Server  string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *Mqtt) Reset() {
	*x = Mqtt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mqtt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mqtt) ProtoMessage() {}

func (x *Mqtt) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mqtt.ProtoReflect.Descriptor instead.
func (*Mqtt) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{1}
}

func (x *Mqtt) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Mqtt) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dhcp      bool   `protobuf:"varint,1,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
	Ip        string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Netmask   string `protobuf:"bytes,3,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Gateway   string `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns       string `protobuf:"bytes,5,opt,name=dns,proto3" json:"dns,omitempty"`
	AllowPost bool   `protobuf:"varint,6,opt,name=allow_post,json=allowPost,proto3" json:"allow_post,omitempty"`
	Mqtt      *Mqtt  `protobuf:"bytes,7,opt,name=mqtt,proto3" json:"mqtt,omitempty"`
	Ntp       *NTP   `protobuf:"bytes,8,opt,name=ntp,proto3" json:"ntp,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{2}
}

func (x *Network) GetDhcp() bool {
	if x != nil {
		return x.Dhcp
	}
	return false
}

func (x *Network) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Network) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *Network) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Network) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *Network) GetAllowPost() bool {
	if x != nil {
		return x.AllowPost
	}
	return false
}

func (x *Network) GetMqtt() *Mqtt {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

func (x *Network) GetNtp() *NTP {
	if x != nil {
		return x.Ntp
	}
	return nil
}

type Temp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Init    bool     `protobuf:"varint,2,opt,name=init,proto3" json:"init,omitempty"`
	Addr    []uint32 `protobuf:"varint,3,rep,packed,name=addr,proto3" json:"addr,omitempty"`
}

func (x *Temp) Reset() {
	*x = Temp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Temp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Temp) ProtoMessage() {}

func (x *Temp) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Temp.ProtoReflect.Descriptor instead.
func (*Temp) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{3}
}

func (x *Temp) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Temp) GetInit() bool {
	if x != nil {
		return x.Init
	}
	return false
}

func (x *Temp) GetAddr() []uint32 {
	if x != nil {
		return x.Addr
	}
	return nil
}

type AnalogSensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled   bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Threshold float32 `protobuf:"fixed32,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *AnalogSensor) Reset() {
	*x = AnalogSensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalogSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalogSensor) ProtoMessage() {}

func (x *AnalogSensor) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalogSensor.ProtoReflect.Descriptor instead.
func (*AnalogSensor) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{4}
}

func (x *AnalogSensor) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AnalogSensor) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Sensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Twin              *Temp         `protobuf:"bytes,1,opt,name=twin,proto3" json:"twin,omitempty"`
	Twout             *Temp         `protobuf:"bytes,2,opt,name=twout,proto3" json:"twout,omitempty"`
	Tamb              *Temp         `protobuf:"bytes,3,opt,name=tamb,proto3" json:"tamb,omitempty"`
	WaitForConversion bool          `protobuf:"varint,4,opt,name=wait_for_conversion,json=waitForConversion,proto3" json:"wait_for_conversion,omitempty"`
	TempResolution    uint32        `protobuf:"varint,5,opt,name=temp_resolution,json=tempResolution,proto3" json:"temp_resolution,omitempty"`
	Ph                *AnalogSensor `protobuf:"bytes,6,opt,name=ph,proto3" json:"ph,omitempty"`
	Ch                *AnalogSensor `protobuf:"bytes,7,opt,name=ch,proto3" json:"ch,omitempty"`
	WaterPressure     *AnalogSensor `protobuf:"bytes,8,opt,name=water_pressure,json=waterPressure,proto3" json:"water_pressure,omitempty"`
}

func (x *Sensors) Reset() {
	*x = Sensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensors) ProtoMessage() {}

func (x *Sensors) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensors.ProtoReflect.Descriptor instead.
func (*Sensors) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{5}
}

func (x *Sensors) GetTwin() *Temp {
	if x != nil {
		return x.Twin
	}
	return nil
}

func (x *Sensors) GetTwout() *Temp {
	if x != nil {
		return x.Twout
	}
	return nil
}

func (x *Sensors) GetTamb() *Temp {
	if x != nil {
		return x.Tamb
	}
	return nil
}

func (x *Sensors) GetWaitForConversion() bool {
	if x != nil {
		return x.WaitForConversion
	}
	return false
}

func (x *Sensors) GetTempResolution() uint32 {
	if x != nil {
		return x.TempResolution
	}
	return 0
}

func (x *Sensors) GetPh() *AnalogSensor {
	if x != nil {
		return x.Ph
	}
	return nil
}

func (x *Sensors) GetCh() *AnalogSensor {
	if x != nil {
		return x.Ch
	}
	return nil
}

func (x *Sensors) GetWaterPressure() *AnalogSensor {
	if x != nil {
		return x.WaterPressure
	}
	return nil
}

type Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LcdBacklightDuration uint32  `protobuf:"varint,1,opt,name=lcd_backlight_duration,json=lcdBacklightDuration,proto3" json:"lcd_backlight_duration,omitempty"`
	AckDuration          uint32  `protobuf:"varint,2,opt,name=ack_duration,json=ackDuration,proto3" json:"ack_duration,omitempty"`
	AckTone              float64 `protobuf:"fixed64,3,opt,name=ack_tone,json=ackTone,proto3" json:"ack_tone,omitempty"`
	SerialOut            bool    `protobuf:"varint,4,opt,name=serial_out,json=serialOut,proto3" json:"serial_out,omitempty"`
	DisplayStartup       bool    `protobuf:"varint,5,opt,name=display_startup,json=displayStartup,proto3" json:"display_startup,omitempty"`
}

func (x *Global) Reset() {
	*x = Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Global) ProtoMessage() {}

func (x *Global) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Global.ProtoReflect.Descriptor instead.
func (*Global) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{6}
}

func (x *Global) GetLcdBacklightDuration() uint32 {
	if x != nil {
		return x.LcdBacklightDuration
	}
	return 0
}

func (x *Global) GetAckDuration() uint32 {
	if x != nil {
		return x.AckDuration
	}
	return 0
}

func (x *Global) GetAckTone() float64 {
	if x != nil {
		return x.AckTone
	}
	return 0
}

func (x *Global) GetSerialOut() bool {
	if x != nil {
		return x.SerialOut
	}
	return false
}

func (x *Global) GetDisplayStartup() bool {
	if x != nil {
		return x.DisplayStartup
	}
	return false
}

type Pump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForceFilter   bool   `protobuf:"varint,1,opt,name=force_filter,json=forceFilter,proto3" json:"force_filter,omitempty"`
	ForcePh       bool   `protobuf:"varint,2,opt,name=force_ph,json=forcePh,proto3" json:"force_ph,omitempty"`
	ForceCh       bool   `protobuf:"varint,3,opt,name=force_ch,json=forceCh,proto3" json:"force_ch,omitempty"`
	Automatic     bool   `protobuf:"varint,4,opt,name=automatic,proto3" json:"automatic,omitempty"`
	ForceCheck    bool   `protobuf:"varint,5,opt,name=force_check,json=forceCheck,proto3" json:"force_check,omitempty"`
	ForceDuration uint32 `protobuf:"varint,6,opt,name=force_duration,json=forceDuration,proto3" json:"force_duration,omitempty"`
}

func (x *Pump) Reset() {
	*x = Pump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pump) ProtoMessage() {}

func (x *Pump) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pump.ProtoReflect.Descriptor instead.
func (*Pump) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{7}
}

func (x *Pump) GetForceFilter() bool {
	if x != nil {
		return x.ForceFilter
	}
	return false
}

func (x *Pump) GetForcePh() bool {
	if x != nil {
		return x.ForcePh
	}
	return false
}

func (x *Pump) GetForceCh() bool {
	if x != nil {
		return x.ForceCh
	}
	return false
}

func (x *Pump) GetAutomatic() bool {
	if x != nil {
		return x.Automatic
	}
	return false
}

func (x *Pump) GetForceCheck() bool {
	if x != nil {
		return x.ForceCheck
	}
	return false
}

func (x *Pump) GetForceDuration() uint32 {
	if x != nil {
		return x.ForceDuration
	}
	return 0
}

type Alarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter  bool `protobuf:"varint,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Ph      bool `protobuf:"varint,2,opt,name=ph,proto3" json:"ph,omitempty"`
	Ch      bool `protobuf:"varint,3,opt,name=ch,proto3" json:"ch,omitempty"`
	Rtc     bool `protobuf:"varint,5,opt,name=rtc,proto3" json:"rtc,omitempty"`
	Storage bool `protobuf:"varint,6,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *Alarms) Reset() {
	*x = Alarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alarms) ProtoMessage() {}

func (x *Alarms) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alarms.ProtoReflect.Descriptor instead.
func (*Alarms) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{8}
}

func (x *Alarms) GetFilter() bool {
	if x != nil {
		return x.Filter
	}
	return false
}

func (x *Alarms) GetPh() bool {
	if x != nil {
		return x.Ph
	}
	return false
}

func (x *Alarms) GetCh() bool {
	if x != nil {
		return x.Ch
	}
	return false
}

func (x *Alarms) GetRtc() bool {
	if x != nil {
		return x.Rtc
	}
	return false
}

func (x *Alarms) GetStorage() bool {
	if x != nil {
		return x.Storage
	}
	return false
}

type Tests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled  bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Twater   float32 `protobuf:"fixed32,2,opt,name=twater,proto3" json:"twater,omitempty"`
	Tamb     float32 `protobuf:"fixed32,3,opt,name=tamb,proto3" json:"tamb,omitempty"`
	Ph       float32 `protobuf:"fixed32,4,opt,name=ph,proto3" json:"ph,omitempty"`
	Pressure float32 `protobuf:"fixed32,5,opt,name=pressure,proto3" json:"pressure,omitempty"`
}

func (x *Tests) Reset() {
	*x = Tests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tests) ProtoMessage() {}

func (x *Tests) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tests.ProtoReflect.Descriptor instead.
func (*Tests) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{9}
}

func (x *Tests) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Tests) GetTwater() float32 {
	if x != nil {
		return x.Twater
	}
	return 0
}

func (x *Tests) GetTamb() float32 {
	if x != nil {
		return x.Tamb
	}
	return 0
}

func (x *Tests) GetPh() float32 {
	if x != nil {
		return x.Ph
	}
	return 0
}

func (x *Tests) GetPressure() float32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

type Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tamb            float32 `protobuf:"fixed32,1,opt,name=tamb,proto3" json:"tamb,omitempty"`
	Twater          float32 `protobuf:"fixed32,2,opt,name=twater,proto3" json:"twater,omitempty"`
	SavedTwater     float32 `protobuf:"fixed32,3,opt,name=saved_twater,json=savedTwater,proto3" json:"saved_twater,omitempty"`
	Ph              float32 `protobuf:"fixed32,4,opt,name=ph,proto3" json:"ph,omitempty"`
	Ch              float32 `protobuf:"fixed32,5,opt,name=ch,proto3" json:"ch,omitempty"`
	WaterPressure   float32 `protobuf:"fixed32,6,opt,name=water_pressure,json=waterPressure,proto3" json:"water_pressure,omitempty"`
	Over_15Duration uint32  `protobuf:"varint,7,opt,name=over_15_duration,json=over15Duration,proto3" json:"over_15_duration,omitempty"`
	Hour            uint32  `protobuf:"varint,8,opt,name=hour,proto3" json:"hour,omitempty"`
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{10}
}

func (x *Metrics) GetTamb() float32 {
	if x != nil {
		return x.Tamb
	}
	return 0
}

func (x *Metrics) GetTwater() float32 {
	if x != nil {
		return x.Twater
	}
	return 0
}

func (x *Metrics) GetSavedTwater() float32 {
	if x != nil {
		return x.SavedTwater
	}
	return 0
}

func (x *Metrics) GetPh() float32 {
	if x != nil {
		return x.Ph
	}
	return 0
}

func (x *Metrics) GetCh() float32 {
	if x != nil {
		return x.Ch
	}
	return 0
}

func (x *Metrics) GetWaterPressure() float32 {
	if x != nil {
		return x.WaterPressure
	}
	return 0
}

func (x *Metrics) GetOver_15Duration() uint32 {
	if x != nil {
		return x.Over_15Duration
	}
	return 0
}

func (x *Metrics) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

type States struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Startup   bool `protobuf:"varint,1,opt,name=startup,proto3" json:"startup,omitempty"`
	FilterOn  bool `protobuf:"varint,2,opt,name=filter_on,json=filterOn,proto3" json:"filter_on,omitempty"`
	PhOn      bool `protobuf:"varint,3,opt,name=ph_on,json=phOn,proto3" json:"ph_on,omitempty"`
	ChOn      bool `protobuf:"varint,4,opt,name=ch_on,json=chOn,proto3" json:"ch_on,omitempty"`
	Automatic bool `protobuf:"varint,5,opt,name=automatic,proto3" json:"automatic,omitempty"`
	NetActive bool `protobuf:"varint,6,opt,name=net_active,json=netActive,proto3" json:"net_active,omitempty"`
	Ntp       bool `protobuf:"varint,7,opt,name=ntp,proto3" json:"ntp,omitempty"`
	Rtc       bool `protobuf:"varint,8,opt,name=rtc,proto3" json:"rtc,omitempty"`
}

func (x *States) Reset() {
	*x = States{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *States) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*States) ProtoMessage() {}

func (x *States) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use States.ProtoReflect.Descriptor instead.
func (*States) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{11}
}

func (x *States) GetStartup() bool {
	if x != nil {
		return x.Startup
	}
	return false
}

func (x *States) GetFilterOn() bool {
	if x != nil {
		return x.FilterOn
	}
	return false
}

func (x *States) GetPhOn() bool {
	if x != nil {
		return x.PhOn
	}
	return false
}

func (x *States) GetChOn() bool {
	if x != nil {
		return x.ChOn
	}
	return false
}

func (x *States) GetAutomatic() bool {
	if x != nil {
		return x.Automatic
	}
	return false
}

func (x *States) GetNetActive() bool {
	if x != nil {
		return x.NetActive
	}
	return false
}

func (x *States) GetNtp() bool {
	if x != nil {
		return x.Ntp
	}
	return false
}

func (x *States) GetRtc() bool {
	if x != nil {
		return x.Rtc
	}
	return false
}

type Infos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Compile   string    `protobuf:"bytes,1,opt,name=compile,proto3" json:"compile,omitempty"`
	BoardName string    `protobuf:"bytes,2,opt,name=board_name,json=boardName,proto3" json:"board_name,omitempty"`
	Versions  *Versions `protobuf:"bytes,3,opt,name=versions,proto3" json:"versions,omitempty"`
}

func (x *Infos) Reset() {
	*x = Infos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Infos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Infos) ProtoMessage() {}

func (x *Infos) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Infos.ProtoReflect.Descriptor instead.
func (*Infos) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{12}
}

func (x *Infos) GetCompile() string {
	if x != nil {
		return x.Compile
	}
	return ""
}

func (x *Infos) GetBoardName() string {
	if x != nil {
		return x.BoardName
	}
	return ""
}

func (x *Infos) GetVersions() *Versions {
	if x != nil {
		return x.Versions
	}
	return nil
}

type Versions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domopool   string `protobuf:"bytes,1,opt,name=domopool,proto3" json:"domopool,omitempty"`
	Platformio string `protobuf:"bytes,2,opt,name=platformio,proto3" json:"platformio,omitempty"`
	EspIdf     string `protobuf:"bytes,3,opt,name=esp_idf,json=espIdf,proto3" json:"esp_idf,omitempty"`
	Xtensa     string `protobuf:"bytes,4,opt,name=xtensa,proto3" json:"xtensa,omitempty"`
	TftEspi    string `protobuf:"bytes,6,opt,name=tft_espi,json=tftEspi,proto3" json:"tft_espi,omitempty"`
}

func (x *Versions) Reset() {
	*x = Versions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Versions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Versions) ProtoMessage() {}

func (x *Versions) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Versions.ProtoReflect.Descriptor instead.
func (*Versions) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{13}
}

func (x *Versions) GetDomopool() string {
	if x != nil {
		return x.Domopool
	}
	return ""
}

func (x *Versions) GetPlatformio() string {
	if x != nil {
		return x.Platformio
	}
	return ""
}

func (x *Versions) GetEspIdf() string {
	if x != nil {
		return x.EspIdf
	}
	return ""
}

func (x *Versions) GetXtensa() string {
	if x != nil {
		return x.Xtensa
	}
	return ""
}

func (x *Versions) GetTftEspi() string {
	if x != nil {
		return x.TftEspi
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Sensors *Sensors `protobuf:"bytes,2,opt,name=sensors,proto3" json:"sensors,omitempty"`
	Global  *Global  `protobuf:"bytes,3,opt,name=global,proto3" json:"global,omitempty"`
	Pump    *Pump    `protobuf:"bytes,5,opt,name=pump,proto3" json:"pump,omitempty"`
	Metrics *Metrics `protobuf:"bytes,6,opt,name=metrics,proto3" json:"metrics,omitempty"`
	States  *States  `protobuf:"bytes,7,opt,name=states,proto3" json:"states,omitempty"`
	Alarms  *Alarms  `protobuf:"bytes,8,opt,name=alarms,proto3" json:"alarms,omitempty"`
	Tests   *Tests   `protobuf:"bytes,9,opt,name=tests,proto3" json:"tests,omitempty"`
	Infos   *Infos   `protobuf:"bytes,10,opt,name=infos,proto3" json:"infos,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{14}
}

func (x *Config) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Config) GetSensors() *Sensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Config) GetGlobal() *Global {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *Config) GetPump() *Pump {
	if x != nil {
		return x.Pump
	}
	return nil
}

func (x *Config) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Config) GetStates() *States {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *Config) GetAlarms() *Alarms {
	if x != nil {
		return x.Alarms
	}
	return nil
}

func (x *Config) GetTests() *Tests {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *Config) GetInfos() *Infos {
	if x != nil {
		return x.Infos
	}
	return nil
}

var File_domopool_proto protoreflect.FileDescriptor

var file_domopool_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x56, 0x0a, 0x03, 0x4e, 0x54,
	0x50, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x22, 0x38, 0x0a, 0x04, 0x4d, 0x71, 0x74, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x68, 0x63, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x71, 0x74, 0x74, 0x52,
	0x04, 0x6d, 0x71, 0x74, 0x74, 0x12, 0x1f, 0x0a, 0x03, 0x6e, 0x74, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4e, 0x54,
	0x50, 0x52, 0x03, 0x6e, 0x74, 0x70, 0x22, 0x48, 0x0a, 0x04, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x22, 0x46, 0x0a, 0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xdf, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x77, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x77, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x05, 0x74, 0x77, 0x6f, 0x75, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x74, 0x61, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64,
	0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x61,
	0x6d, 0x62, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x65, 0x6d,
	0x70, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x02, 0x70,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52,
	0x02, 0x70, 0x68, 0x12, 0x26, 0x0a, 0x02, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x02, 0x63, 0x68, 0x12, 0x3d, 0x0a, 0x0e, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x0d, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x06, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x63, 0x64, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6c, 0x63, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x61, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75,
	0x70, 0x22, 0xc5, 0x01, 0x0a, 0x04, 0x50, 0x75, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x43, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x06, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x70,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x70, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x74, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x74, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x74, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x74, 0x61, 0x6d, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x02, 0x70, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x61,
	0x6d, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x74, 0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x5f, 0x74, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x54, 0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x70, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x70, 0x68, 0x12, 0x0e, 0x0a,
	0x02, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x63, 0x68, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x35, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6f, 0x76, 0x65, 0x72, 0x31, 0x35, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6f,
	0x75, 0x72, 0x22, 0xca, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x68, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x68, 0x4f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x68, 0x5f,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x68, 0x4f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x74, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x74, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x74, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x74, 0x63, 0x22,
	0x70, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x92, 0x01, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x73,
	0x70, 0x5f, 0x69, 0x64, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x73, 0x70,
	0x49, 0x64, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x66, 0x74, 0x5f, 0x65, 0x73, 0x70, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x66, 0x74, 0x45, 0x73, 0x70, 0x69, 0x22, 0xff, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2b,
	0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f,
	0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x75, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x50,
	0x75, 0x6d, 0x70, 0x52, 0x04, 0x70, 0x75, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6f, 0x6d,
	0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6f, 0x6d, 0x6f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6c, 0x67, 0x6f, 0x74, 0x68, 0x33, 0x31,
	0x2f, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_domopool_proto_rawDescOnce sync.Once
	file_domopool_proto_rawDescData = file_domopool_proto_rawDesc
)

func file_domopool_proto_rawDescGZIP() []byte {
	file_domopool_proto_rawDescOnce.Do(func() {
		file_domopool_proto_rawDescData = protoimpl.X.CompressGZIP(file_domopool_proto_rawDescData)
	})
	return file_domopool_proto_rawDescData
}

var file_domopool_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_domopool_proto_goTypes = []interface{}{
	(*NTP)(nil),          // 0: domopool.NTP
	(*Mqtt)(nil),         // 1: domopool.Mqtt
	(*Network)(nil),      // 2: domopool.Network
	(*Temp)(nil),         // 3: domopool.Temp
	(*AnalogSensor)(nil), // 4: domopool.AnalogSensor
	(*Sensors)(nil),      // 5: domopool.Sensors
	(*Global)(nil),       // 6: domopool.Global
	(*Pump)(nil),         // 7: domopool.Pump
	(*Alarms)(nil),       // 8: domopool.Alarms
	(*Tests)(nil),        // 9: domopool.Tests
	(*Metrics)(nil),      // 10: domopool.Metrics
	(*States)(nil),       // 11: domopool.States
	(*Infos)(nil),        // 12: domopool.Infos
	(*Versions)(nil),     // 13: domopool.Versions
	(*Config)(nil),       // 14: domopool.Config
}
var file_domopool_proto_depIdxs = []int32{
	1,  // 0: domopool.Network.mqtt:type_name -> domopool.Mqtt
	0,  // 1: domopool.Network.ntp:type_name -> domopool.NTP
	3,  // 2: domopool.Sensors.twin:type_name -> domopool.Temp
	3,  // 3: domopool.Sensors.twout:type_name -> domopool.Temp
	3,  // 4: domopool.Sensors.tamb:type_name -> domopool.Temp
	4,  // 5: domopool.Sensors.ph:type_name -> domopool.AnalogSensor
	4,  // 6: domopool.Sensors.ch:type_name -> domopool.AnalogSensor
	4,  // 7: domopool.Sensors.water_pressure:type_name -> domopool.AnalogSensor
	13, // 8: domopool.Infos.versions:type_name -> domopool.Versions
	2,  // 9: domopool.Config.network:type_name -> domopool.Network
	5,  // 10: domopool.Config.sensors:type_name -> domopool.Sensors
	6,  // 11: domopool.Config.global:type_name -> domopool.Global
	7,  // 12: domopool.Config.pump:type_name -> domopool.Pump
	10, // 13: domopool.Config.metrics:type_name -> domopool.Metrics
	11, // 14: domopool.Config.states:type_name -> domopool.States
	8,  // 15: domopool.Config.alarms:type_name -> domopool.Alarms
	9,  // 16: domopool.Config.tests:type_name -> domopool.Tests
	12, // 17: domopool.Config.infos:type_name -> domopool.Infos
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_domopool_proto_init() }
func file_domopool_proto_init() {
	if File_domopool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_domopool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mqtt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Temp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalogSensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*States); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Infos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Versions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_domopool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_domopool_proto_goTypes,
		DependencyIndexes: file_domopool_proto_depIdxs,
		MessageInfos:      file_domopool_proto_msgTypes,
	}.Build()
	File_domopool_proto = out.File
	file_domopool_proto_rawDesc = nil
	file_domopool_proto_goTypes = nil
	file_domopool_proto_depIdxs = nil
}
