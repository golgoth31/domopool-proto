// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: domopool.proto

package domopool_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelayStates int32

const (
	RelayStates_auto  RelayStates = 0
	RelayStates_start RelayStates = 1
	RelayStates_stop  RelayStates = 2
)

// Enum value maps for RelayStates.
var (
	RelayStates_name = map[int32]string{
		0: "auto",
		1: "start",
		2: "stop",
	}
	RelayStates_value = map[string]int32{
		"auto":  0,
		"start": 1,
		"stop":  2,
	}
)

func (x RelayStates) Enum() *RelayStates {
	p := new(RelayStates)
	*p = x
	return p
}

func (x RelayStates) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelayStates) Descriptor() protoreflect.EnumDescriptor {
	return file_domopool_proto_enumTypes[0].Descriptor()
}

func (RelayStates) Type() protoreflect.EnumType {
	return &file_domopool_proto_enumTypes[0]
}

func (x RelayStates) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelayStates.Descriptor instead.
func (RelayStates) EnumDescriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{0}
}

type RelayNames int32

const (
	RelayNames_filter RelayNames = 0
	RelayNames_ch     RelayNames = 1
	RelayNames_ph     RelayNames = 2
	RelayNames_light  RelayNames = 3
)

// Enum value maps for RelayNames.
var (
	RelayNames_name = map[int32]string{
		0: "filter",
		1: "ch",
		2: "ph",
		3: "light",
	}
	RelayNames_value = map[string]int32{
		"filter": 0,
		"ch":     1,
		"ph":     2,
		"light":  3,
	}
)

func (x RelayNames) Enum() *RelayNames {
	p := new(RelayNames)
	*p = x
	return p
}

func (x RelayNames) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelayNames) Descriptor() protoreflect.EnumDescriptor {
	return file_domopool_proto_enumTypes[1].Descriptor()
}

func (RelayNames) Type() protoreflect.EnumType {
	return &file_domopool_proto_enumTypes[1]
}

func (x RelayNames) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelayNames.Descriptor instead.
func (RelayNames) EnumDescriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{1}
}

type NTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayLight uint32 `protobuf:"varint,1,opt,name=day_light,json=dayLight,proto3" json:"day_light,omitempty"` // 3600 if daylight is observed or 0 if not
	Server   string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Timezone uint32 `protobuf:"varint,3,opt,name=timezone,proto3" json:"timezone,omitempty"` // UTC offset in s: UTC+1=3600
}

func (x *NTP) Reset() {
	*x = NTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NTP) ProtoMessage() {}

func (x *NTP) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NTP.ProtoReflect.Descriptor instead.
func (*NTP) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{0}
}

func (x *NTP) GetDayLight() uint32 {
	if x != nil {
		return x.DayLight
	}
	return 0
}

func (x *NTP) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *NTP) GetTimezone() uint32 {
	if x != nil {
		return x.Timezone
	}
	return 0
}

type Mqtt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Server  string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *Mqtt) Reset() {
	*x = Mqtt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mqtt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mqtt) ProtoMessage() {}

func (x *Mqtt) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mqtt.ProtoReflect.Descriptor instead.
func (*Mqtt) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{1}
}

func (x *Mqtt) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Mqtt) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dhcp      bool   `protobuf:"varint,1,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
	Ip        string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Netmask   string `protobuf:"bytes,3,opt,name=netmask,proto3" json:"netmask,omitempty"`
	Gateway   string `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns       string `protobuf:"bytes,5,opt,name=dns,proto3" json:"dns,omitempty"`
	AllowPost bool   `protobuf:"varint,6,opt,name=allow_post,json=allowPost,proto3" json:"allow_post,omitempty"`
	Mqtt      *Mqtt  `protobuf:"bytes,7,opt,name=mqtt,proto3" json:"mqtt,omitempty"`
	Ntp       *NTP   `protobuf:"bytes,8,opt,name=ntp,proto3" json:"ntp,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{2}
}

func (x *Network) GetDhcp() bool {
	if x != nil {
		return x.Dhcp
	}
	return false
}

func (x *Network) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Network) GetNetmask() string {
	if x != nil {
		return x.Netmask
	}
	return ""
}

func (x *Network) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Network) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *Network) GetAllowPost() bool {
	if x != nil {
		return x.AllowPost
	}
	return false
}

func (x *Network) GetMqtt() *Mqtt {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

func (x *Network) GetNtp() *NTP {
	if x != nil {
		return x.Ntp
	}
	return nil
}

type Temp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Init    bool     `protobuf:"varint,2,opt,name=init,proto3" json:"init,omitempty"`
	Addr    []uint32 `protobuf:"varint,8,rep,packed,name=addr,proto3" json:"addr,omitempty"`
}

func (x *Temp) Reset() {
	*x = Temp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Temp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Temp) ProtoMessage() {}

func (x *Temp) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Temp.ProtoReflect.Descriptor instead.
func (*Temp) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{3}
}

func (x *Temp) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Temp) GetInit() bool {
	if x != nil {
		return x.Init
	}
	return false
}

func (x *Temp) GetAddr() []uint32 {
	if x != nil {
		return x.Addr
	}
	return nil
}

type Limits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WpMin float32 `protobuf:"fixed32,1,opt,name=wp_min,json=wpMin,proto3" json:"wp_min,omitempty"`
	WpMax float32 `protobuf:"fixed32,2,opt,name=wp_max,json=wpMax,proto3" json:"wp_max,omitempty"`
	PhMin float32 `protobuf:"fixed32,3,opt,name=ph_min,json=phMin,proto3" json:"ph_min,omitempty"`
	PhMax float32 `protobuf:"fixed32,4,opt,name=ph_max,json=phMax,proto3" json:"ph_max,omitempty"`
	ChMin float32 `protobuf:"fixed32,5,opt,name=ch_min,json=chMin,proto3" json:"ch_min,omitempty"`
	ChMax float32 `protobuf:"fixed32,6,opt,name=ch_max,json=chMax,proto3" json:"ch_max,omitempty"`
	// number of hour to wait when temp is above 15 to activate ch
	ChWaitBeforeAllow uint32 `protobuf:"varint,7,opt,name=ch_wait_before_allow,json=chWaitBeforeAllow,proto3" json:"ch_wait_before_allow,omitempty"`
	ChWaitBeforeDeny  uint32 `protobuf:"varint,8,opt,name=ch_wait_before_deny,json=chWaitBeforeDeny,proto3" json:"ch_wait_before_deny,omitempty"`
	// temp threshold to activate ch
	ChTempThresholdHigh float32 `protobuf:"fixed32,9,opt,name=ch_temp_threshold_high,json=chTempThresholdHigh,proto3" json:"ch_temp_threshold_high,omitempty"`
	ChTempThresholdLow  float32 `protobuf:"fixed32,10,opt,name=ch_temp_threshold_low,json=chTempThresholdLow,proto3" json:"ch_temp_threshold_low,omitempty"`
	Wp_0Derive          float32 `protobuf:"fixed32,11,opt,name=wp_0_derive,json=wp0Derive,proto3" json:"wp_0_derive,omitempty"`
	TwMin               float32 `protobuf:"fixed32,12,opt,name=tw_min,json=twMin,proto3" json:"tw_min,omitempty"`
	TwMax               float32 `protobuf:"fixed32,13,opt,name=tw_max,json=twMax,proto3" json:"tw_max,omitempty"`
	TambMin             float32 `protobuf:"fixed32,14,opt,name=tamb_min,json=tambMin,proto3" json:"tamb_min,omitempty"`
}

func (x *Limits) Reset() {
	*x = Limits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limits) ProtoMessage() {}

func (x *Limits) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limits.ProtoReflect.Descriptor instead.
func (*Limits) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{4}
}

func (x *Limits) GetWpMin() float32 {
	if x != nil {
		return x.WpMin
	}
	return 0
}

func (x *Limits) GetWpMax() float32 {
	if x != nil {
		return x.WpMax
	}
	return 0
}

func (x *Limits) GetPhMin() float32 {
	if x != nil {
		return x.PhMin
	}
	return 0
}

func (x *Limits) GetPhMax() float32 {
	if x != nil {
		return x.PhMax
	}
	return 0
}

func (x *Limits) GetChMin() float32 {
	if x != nil {
		return x.ChMin
	}
	return 0
}

func (x *Limits) GetChMax() float32 {
	if x != nil {
		return x.ChMax
	}
	return 0
}

func (x *Limits) GetChWaitBeforeAllow() uint32 {
	if x != nil {
		return x.ChWaitBeforeAllow
	}
	return 0
}

func (x *Limits) GetChWaitBeforeDeny() uint32 {
	if x != nil {
		return x.ChWaitBeforeDeny
	}
	return 0
}

func (x *Limits) GetChTempThresholdHigh() float32 {
	if x != nil {
		return x.ChTempThresholdHigh
	}
	return 0
}

func (x *Limits) GetChTempThresholdLow() float32 {
	if x != nil {
		return x.ChTempThresholdLow
	}
	return 0
}

func (x *Limits) GetWp_0Derive() float32 {
	if x != nil {
		return x.Wp_0Derive
	}
	return 0
}

func (x *Limits) GetTwMin() float32 {
	if x != nil {
		return x.TwMin
	}
	return 0
}

func (x *Limits) GetTwMax() float32 {
	if x != nil {
		return x.TwMax
	}
	return 0
}

func (x *Limits) GetTambMin() float32 {
	if x != nil {
		return x.TambMin
	}
	return 0
}

type AnalogSensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AdcPin            uint32  `protobuf:"varint,3,opt,name=adc_pin,json=adcPin,proto3" json:"adc_pin,omitempty"`
	Threshold         float32 `protobuf:"fixed32,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	ThresholdAccuracy uint32  `protobuf:"varint,4,opt,name=threshold_accuracy,json=thresholdAccuracy,proto3" json:"threshold_accuracy,omitempty"`
	Vmin              float32 `protobuf:"fixed32,5,opt,name=vmin,proto3" json:"vmin,omitempty"`
	Vmax              float32 `protobuf:"fixed32,6,opt,name=vmax,proto3" json:"vmax,omitempty"`
	PrecisionFactor   uint32  `protobuf:"varint,7,opt,name=precision_factor,json=precisionFactor,proto3" json:"precision_factor,omitempty"`
	AutoCal           bool    `protobuf:"varint,8,opt,name=auto_cal,json=autoCal,proto3" json:"auto_cal,omitempty"`
}

func (x *AnalogSensor) Reset() {
	*x = AnalogSensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalogSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalogSensor) ProtoMessage() {}

func (x *AnalogSensor) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalogSensor.ProtoReflect.Descriptor instead.
func (*AnalogSensor) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{5}
}

func (x *AnalogSensor) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AnalogSensor) GetAdcPin() uint32 {
	if x != nil {
		return x.AdcPin
	}
	return 0
}

func (x *AnalogSensor) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AnalogSensor) GetThresholdAccuracy() uint32 {
	if x != nil {
		return x.ThresholdAccuracy
	}
	return 0
}

func (x *AnalogSensor) GetVmin() float32 {
	if x != nil {
		return x.Vmin
	}
	return 0
}

func (x *AnalogSensor) GetVmax() float32 {
	if x != nil {
		return x.Vmax
	}
	return 0
}

func (x *AnalogSensor) GetPrecisionFactor() uint32 {
	if x != nil {
		return x.PrecisionFactor
	}
	return 0
}

func (x *AnalogSensor) GetAutoCal() bool {
	if x != nil {
		return x.AutoCal
	}
	return false
}

type Sensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Twin              *Temp         `protobuf:"bytes,1,opt,name=twin,proto3" json:"twin,omitempty"`
	Twout             *Temp         `protobuf:"bytes,2,opt,name=twout,proto3" json:"twout,omitempty"`
	Tamb              *Temp         `protobuf:"bytes,3,opt,name=tamb,proto3" json:"tamb,omitempty"`
	WaitForConversion bool          `protobuf:"varint,4,opt,name=wait_for_conversion,json=waitForConversion,proto3" json:"wait_for_conversion,omitempty"`
	TempResolution    uint32        `protobuf:"varint,5,opt,name=temp_resolution,json=tempResolution,proto3" json:"temp_resolution,omitempty"`
	PrecisionFactor   uint32        `protobuf:"varint,6,opt,name=precision_factor,json=precisionFactor,proto3" json:"precision_factor,omitempty"`
	Ph                *AnalogSensor `protobuf:"bytes,7,opt,name=ph,proto3" json:"ph,omitempty"`
	Ch                *AnalogSensor `protobuf:"bytes,8,opt,name=ch,proto3" json:"ch,omitempty"`
	Wp                *AnalogSensor `protobuf:"bytes,9,opt,name=wp,proto3" json:"wp,omitempty"`
	AdcMode           uint32        `protobuf:"varint,10,opt,name=adc_mode,json=adcMode,proto3" json:"adc_mode,omitempty"`
	AdcDatarate       uint32        `protobuf:"varint,11,opt,name=adc_datarate,json=adcDatarate,proto3" json:"adc_datarate,omitempty"`
	AdcGain           uint32        `protobuf:"varint,12,opt,name=adc_gain,json=adcGain,proto3" json:"adc_gain,omitempty"`
}

func (x *Sensors) Reset() {
	*x = Sensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensors) ProtoMessage() {}

func (x *Sensors) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensors.ProtoReflect.Descriptor instead.
func (*Sensors) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{6}
}

func (x *Sensors) GetTwin() *Temp {
	if x != nil {
		return x.Twin
	}
	return nil
}

func (x *Sensors) GetTwout() *Temp {
	if x != nil {
		return x.Twout
	}
	return nil
}

func (x *Sensors) GetTamb() *Temp {
	if x != nil {
		return x.Tamb
	}
	return nil
}

func (x *Sensors) GetWaitForConversion() bool {
	if x != nil {
		return x.WaitForConversion
	}
	return false
}

func (x *Sensors) GetTempResolution() uint32 {
	if x != nil {
		return x.TempResolution
	}
	return 0
}

func (x *Sensors) GetPrecisionFactor() uint32 {
	if x != nil {
		return x.PrecisionFactor
	}
	return 0
}

func (x *Sensors) GetPh() *AnalogSensor {
	if x != nil {
		return x.Ph
	}
	return nil
}

func (x *Sensors) GetCh() *AnalogSensor {
	if x != nil {
		return x.Ch
	}
	return nil
}

func (x *Sensors) GetWp() *AnalogSensor {
	if x != nil {
		return x.Wp
	}
	return nil
}

func (x *Sensors) GetAdcMode() uint32 {
	if x != nil {
		return x.AdcMode
	}
	return 0
}

func (x *Sensors) GetAdcDatarate() uint32 {
	if x != nil {
		return x.AdcDatarate
	}
	return 0
}

func (x *Sensors) GetAdcGain() uint32 {
	if x != nil {
		return x.AdcGain
	}
	return 0
}

type Global struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LcdBacklightDuration uint32  `protobuf:"varint,1,opt,name=lcd_backlight_duration,json=lcdBacklightDuration,proto3" json:"lcd_backlight_duration,omitempty"`
	AckDuration          uint32  `protobuf:"varint,2,opt,name=ack_duration,json=ackDuration,proto3" json:"ack_duration,omitempty"`
	AckTone              float64 `protobuf:"fixed64,3,opt,name=ack_tone,json=ackTone,proto3" json:"ack_tone,omitempty"`
	SerialOut            bool    `protobuf:"varint,4,opt,name=serial_out,json=serialOut,proto3" json:"serial_out,omitempty"`
	DisplayStartup       bool    `protobuf:"varint,5,opt,name=display_startup,json=displayStartup,proto3" json:"display_startup,omitempty"`
	ForceLight           bool    `protobuf:"varint,6,opt,name=force_light,json=forceLight,proto3" json:"force_light,omitempty"`
	WdtDuration          uint32  `protobuf:"varint,7,opt,name=wdt_duration,json=wdtDuration,proto3" json:"wdt_duration,omitempty"`
}

func (x *Global) Reset() {
	*x = Global{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Global) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Global) ProtoMessage() {}

func (x *Global) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Global.ProtoReflect.Descriptor instead.
func (*Global) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{7}
}

func (x *Global) GetLcdBacklightDuration() uint32 {
	if x != nil {
		return x.LcdBacklightDuration
	}
	return 0
}

func (x *Global) GetAckDuration() uint32 {
	if x != nil {
		return x.AckDuration
	}
	return 0
}

func (x *Global) GetAckTone() float64 {
	if x != nil {
		return x.AckTone
	}
	return 0
}

func (x *Global) GetSerialOut() bool {
	if x != nil {
		return x.SerialOut
	}
	return false
}

func (x *Global) GetDisplayStartup() bool {
	if x != nil {
		return x.DisplayStartup
	}
	return false
}

func (x *Global) GetForceLight() bool {
	if x != nil {
		return x.ForceLight
	}
	return false
}

func (x *Global) GetWdtDuration() uint32 {
	if x != nil {
		return x.WdtDuration
	}
	return 0
}

type Pump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForceFilter    bool   `protobuf:"varint,1,opt,name=force_filter,json=forceFilter,proto3" json:"force_filter,omitempty"`
	ForcePh        bool   `protobuf:"varint,2,opt,name=force_ph,json=forcePh,proto3" json:"force_ph,omitempty"`
	ForceCh        bool   `protobuf:"varint,3,opt,name=force_ch,json=forceCh,proto3" json:"force_ch,omitempty"`
	Automatic      bool   `protobuf:"varint,4,opt,name=automatic,proto3" json:"automatic,omitempty"`
	Recover        bool   `protobuf:"varint,5,opt,name=recover,proto3" json:"recover,omitempty"`
	ForceCheck     bool   `protobuf:"varint,6,opt,name=force_check,json=forceCheck,proto3" json:"force_check,omitempty"`
	ForceDuration  uint32 `protobuf:"varint,7,opt,name=force_duration,json=forceDuration,proto3" json:"force_duration,omitempty"`
	ForceStartTime uint32 `protobuf:"varint,8,opt,name=force_start_time,json=forceStartTime,proto3" json:"force_start_time,omitempty"`
}

func (x *Pump) Reset() {
	*x = Pump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pump) ProtoMessage() {}

func (x *Pump) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pump.ProtoReflect.Descriptor instead.
func (*Pump) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{8}
}

func (x *Pump) GetForceFilter() bool {
	if x != nil {
		return x.ForceFilter
	}
	return false
}

func (x *Pump) GetForcePh() bool {
	if x != nil {
		return x.ForcePh
	}
	return false
}

func (x *Pump) GetForceCh() bool {
	if x != nil {
		return x.ForceCh
	}
	return false
}

func (x *Pump) GetAutomatic() bool {
	if x != nil {
		return x.Automatic
	}
	return false
}

func (x *Pump) GetRecover() bool {
	if x != nil {
		return x.Recover
	}
	return false
}

func (x *Pump) GetForceCheck() bool {
	if x != nil {
		return x.ForceCheck
	}
	return false
}

func (x *Pump) GetForceDuration() uint32 {
	if x != nil {
		return x.ForceDuration
	}
	return 0
}

func (x *Pump) GetForceStartTime() uint32 {
	if x != nil {
		return x.ForceStartTime
	}
	return 0
}

type Ads115Alarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotReady     bool `protobuf:"varint,1,opt,name=not_ready,json=notReady,proto3" json:"not_ready,omitempty"`
	NotStarted   bool `protobuf:"varint,2,opt,name=not_started,json=notStarted,proto3" json:"not_started,omitempty"`
	NotConnected bool `protobuf:"varint,3,opt,name=not_connected,json=notConnected,proto3" json:"not_connected,omitempty"`
}

func (x *Ads115Alarms) Reset() {
	*x = Ads115Alarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ads115Alarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ads115Alarms) ProtoMessage() {}

func (x *Ads115Alarms) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ads115Alarms.ProtoReflect.Descriptor instead.
func (*Ads115Alarms) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{9}
}

func (x *Ads115Alarms) GetNotReady() bool {
	if x != nil {
		return x.NotReady
	}
	return false
}

func (x *Ads115Alarms) GetNotStarted() bool {
	if x != nil {
		return x.NotStarted
	}
	return false
}

func (x *Ads115Alarms) GetNotConnected() bool {
	if x != nil {
		return x.NotConnected
	}
	return false
}

type MqttAlarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics bool `protobuf:"varint,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	States  bool `protobuf:"varint,2,opt,name=states,proto3" json:"states,omitempty"`
	Alarms  bool `protobuf:"varint,3,opt,name=alarms,proto3" json:"alarms,omitempty"`
	Temps   bool `protobuf:"varint,4,opt,name=temps,proto3" json:"temps,omitempty"`
}

func (x *MqttAlarms) Reset() {
	*x = MqttAlarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MqttAlarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MqttAlarms) ProtoMessage() {}

func (x *MqttAlarms) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MqttAlarms.ProtoReflect.Descriptor instead.
func (*MqttAlarms) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{10}
}

func (x *MqttAlarms) GetMetrics() bool {
	if x != nil {
		return x.Metrics
	}
	return false
}

func (x *MqttAlarms) GetStates() bool {
	if x != nil {
		return x.States
	}
	return false
}

func (x *MqttAlarms) GetAlarms() bool {
	if x != nil {
		return x.Alarms
	}
	return false
}

func (x *MqttAlarms) GetTemps() bool {
	if x != nil {
		return x.Temps
	}
	return false
}

type Alarms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    bool          `protobuf:"varint,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Ph        bool          `protobuf:"varint,2,opt,name=ph,proto3" json:"ph,omitempty"`
	Ch        bool          `protobuf:"varint,3,opt,name=ch,proto3" json:"ch,omitempty"`
	Rtc       bool          `protobuf:"varint,5,opt,name=rtc,proto3" json:"rtc,omitempty"`
	WpHigh    bool          `protobuf:"varint,6,opt,name=wp_high,json=wpHigh,proto3" json:"wp_high,omitempty"`
	WpLow     bool          `protobuf:"varint,7,opt,name=wp_low,json=wpLow,proto3" json:"wp_low,omitempty"`
	WpBroken  bool          `protobuf:"varint,8,opt,name=wp_broken,json=wpBroken,proto3" json:"wp_broken,omitempty"`
	Ads1115   *Ads115Alarms `protobuf:"bytes,9,opt,name=ads1115,proto3" json:"ads1115,omitempty"`
	TwFrost   bool          `protobuf:"varint,10,opt,name=tw_frost,json=twFrost,proto3" json:"tw_frost,omitempty"`
	TwHigh    bool          `protobuf:"varint,11,opt,name=tw_high,json=twHigh,proto3" json:"tw_high,omitempty"`
	TambFrost bool          `protobuf:"varint,12,opt,name=tamb_frost,json=tambFrost,proto3" json:"tamb_frost,omitempty"`
	Mqtt      *MqttAlarms   `protobuf:"bytes,13,opt,name=mqtt,proto3" json:"mqtt,omitempty"`
}

func (x *Alarms) Reset() {
	*x = Alarms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alarms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alarms) ProtoMessage() {}

func (x *Alarms) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alarms.ProtoReflect.Descriptor instead.
func (*Alarms) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{11}
}

func (x *Alarms) GetFilter() bool {
	if x != nil {
		return x.Filter
	}
	return false
}

func (x *Alarms) GetPh() bool {
	if x != nil {
		return x.Ph
	}
	return false
}

func (x *Alarms) GetCh() bool {
	if x != nil {
		return x.Ch
	}
	return false
}

func (x *Alarms) GetRtc() bool {
	if x != nil {
		return x.Rtc
	}
	return false
}

func (x *Alarms) GetWpHigh() bool {
	if x != nil {
		return x.WpHigh
	}
	return false
}

func (x *Alarms) GetWpLow() bool {
	if x != nil {
		return x.WpLow
	}
	return false
}

func (x *Alarms) GetWpBroken() bool {
	if x != nil {
		return x.WpBroken
	}
	return false
}

func (x *Alarms) GetAds1115() *Ads115Alarms {
	if x != nil {
		return x.Ads1115
	}
	return nil
}

func (x *Alarms) GetTwFrost() bool {
	if x != nil {
		return x.TwFrost
	}
	return false
}

func (x *Alarms) GetTwHigh() bool {
	if x != nil {
		return x.TwHigh
	}
	return false
}

func (x *Alarms) GetTambFrost() bool {
	if x != nil {
		return x.TambFrost
	}
	return false
}

func (x *Alarms) GetMqtt() *MqttAlarms {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

type Tests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled  bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Twater   float32 `protobuf:"fixed32,2,opt,name=twater,proto3" json:"twater,omitempty"`
	Tamb     float32 `protobuf:"fixed32,3,opt,name=tamb,proto3" json:"tamb,omitempty"`
	Ph       float32 `protobuf:"fixed32,4,opt,name=ph,proto3" json:"ph,omitempty"`
	Pressure float32 `protobuf:"fixed32,5,opt,name=pressure,proto3" json:"pressure,omitempty"`
}

func (x *Tests) Reset() {
	*x = Tests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tests) ProtoMessage() {}

func (x *Tests) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tests.ProtoReflect.Descriptor instead.
func (*Tests) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{12}
}

func (x *Tests) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Tests) GetTwater() float32 {
	if x != nil {
		return x.Twater
	}
	return 0
}

func (x *Tests) GetTamb() float32 {
	if x != nil {
		return x.Tamb
	}
	return 0
}

func (x *Tests) GetPh() float32 {
	if x != nil {
		return x.Ph
	}
	return 0
}

func (x *Tests) GetPressure() float32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

type Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tamb                float32 `protobuf:"fixed32,1,opt,name=tamb,proto3" json:"tamb,omitempty"`
	Twater              float32 `protobuf:"fixed32,2,opt,name=twater,proto3" json:"twater,omitempty"`
	SavedTwater         float32 `protobuf:"fixed32,3,opt,name=saved_twater,json=savedTwater,proto3" json:"saved_twater,omitempty"`
	Ph                  float32 `protobuf:"fixed32,4,opt,name=ph,proto3" json:"ph,omitempty"`
	Ch                  float32 `protobuf:"fixed32,5,opt,name=ch,proto3" json:"ch,omitempty"`
	Wp                  float32 `protobuf:"fixed32,6,opt,name=wp,proto3" json:"wp,omitempty"`
	WpVolt              float32 `protobuf:"fixed32,7,opt,name=wp_volt,json=wpVolt,proto3" json:"wp_volt,omitempty"`
	OverChTHighDuration uint32  `protobuf:"varint,8,opt,name=over_ch_t_high_duration,json=overChTHighDuration,proto3" json:"over_ch_t_high_duration,omitempty"`
	UnderChTLowDuration uint32  `protobuf:"varint,9,opt,name=under_ch_t_low_duration,json=underChTLowDuration,proto3" json:"under_ch_t_low_duration,omitempty"`
	Hour                uint32  `protobuf:"varint,10,opt,name=hour,proto3" json:"hour,omitempty"`
	// uint32 time = 10;
	Time string `protobuf:"bytes,11,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{13}
}

func (x *Metrics) GetTamb() float32 {
	if x != nil {
		return x.Tamb
	}
	return 0
}

func (x *Metrics) GetTwater() float32 {
	if x != nil {
		return x.Twater
	}
	return 0
}

func (x *Metrics) GetSavedTwater() float32 {
	if x != nil {
		return x.SavedTwater
	}
	return 0
}

func (x *Metrics) GetPh() float32 {
	if x != nil {
		return x.Ph
	}
	return 0
}

func (x *Metrics) GetCh() float32 {
	if x != nil {
		return x.Ch
	}
	return 0
}

func (x *Metrics) GetWp() float32 {
	if x != nil {
		return x.Wp
	}
	return 0
}

func (x *Metrics) GetWpVolt() float32 {
	if x != nil {
		return x.WpVolt
	}
	return 0
}

func (x *Metrics) GetOverChTHighDuration() uint32 {
	if x != nil {
		return x.OverChTHighDuration
	}
	return 0
}

func (x *Metrics) GetUnderChTLowDuration() uint32 {
	if x != nil {
		return x.UnderChTLowDuration
	}
	return 0
}

func (x *Metrics) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Metrics) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

type States struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Startup       bool `protobuf:"varint,1,opt,name=startup,proto3" json:"startup,omitempty"`
	FilterOn      bool `protobuf:"varint,2,opt,name=filter_on,json=filterOn,proto3" json:"filter_on,omitempty"`
	PhOn          bool `protobuf:"varint,3,opt,name=ph_on,json=phOn,proto3" json:"ph_on,omitempty"`
	ChOn          bool `protobuf:"varint,4,opt,name=ch_on,json=chOn,proto3" json:"ch_on,omitempty"`
	Automatic     bool `protobuf:"varint,5,opt,name=automatic,proto3" json:"automatic,omitempty"`
	NetActive     bool `protobuf:"varint,6,opt,name=net_active,json=netActive,proto3" json:"net_active,omitempty"`
	Ntp           bool `protobuf:"varint,7,opt,name=ntp,proto3" json:"ntp,omitempty"`
	Rtc           bool `protobuf:"varint,8,opt,name=rtc,proto3" json:"rtc,omitempty"`
	LightOn       bool `protobuf:"varint,9,opt,name=light_on,json=lightOn,proto3" json:"light_on,omitempty"`
	MqttConnected bool `protobuf:"varint,10,opt,name=mqtt_connected,json=mqttConnected,proto3" json:"mqtt_connected,omitempty"`
	Recover       bool `protobuf:"varint,11,opt,name=recover,proto3" json:"recover,omitempty"`
}

func (x *States) Reset() {
	*x = States{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *States) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*States) ProtoMessage() {}

func (x *States) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use States.ProtoReflect.Descriptor instead.
func (*States) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{14}
}

func (x *States) GetStartup() bool {
	if x != nil {
		return x.Startup
	}
	return false
}

func (x *States) GetFilterOn() bool {
	if x != nil {
		return x.FilterOn
	}
	return false
}

func (x *States) GetPhOn() bool {
	if x != nil {
		return x.PhOn
	}
	return false
}

func (x *States) GetChOn() bool {
	if x != nil {
		return x.ChOn
	}
	return false
}

func (x *States) GetAutomatic() bool {
	if x != nil {
		return x.Automatic
	}
	return false
}

func (x *States) GetNetActive() bool {
	if x != nil {
		return x.NetActive
	}
	return false
}

func (x *States) GetNtp() bool {
	if x != nil {
		return x.Ntp
	}
	return false
}

func (x *States) GetRtc() bool {
	if x != nil {
		return x.Rtc
	}
	return false
}

func (x *States) GetLightOn() bool {
	if x != nil {
		return x.LightOn
	}
	return false
}

func (x *States) GetMqttConnected() bool {
	if x != nil {
		return x.MqttConnected
	}
	return false
}

func (x *States) GetRecover() bool {
	if x != nil {
		return x.Recover
	}
	return false
}

type Versions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domopool   string `protobuf:"bytes,1,opt,name=domopool,proto3" json:"domopool,omitempty"`
	Platformio uint32 `protobuf:"varint,2,opt,name=platformio,proto3" json:"platformio,omitempty"`
	EspIdf     string `protobuf:"bytes,3,opt,name=esp_idf,json=espIdf,proto3" json:"esp_idf,omitempty"`
	Xtensa     string `protobuf:"bytes,4,opt,name=xtensa,proto3" json:"xtensa,omitempty"`
	TftEspi    string `protobuf:"bytes,6,opt,name=tft_espi,json=tftEspi,proto3" json:"tft_espi,omitempty"`
	Dallastemp string `protobuf:"bytes,7,opt,name=dallastemp,proto3" json:"dallastemp,omitempty"`
	Ads1115    string `protobuf:"bytes,8,opt,name=ads1115,proto3" json:"ads1115,omitempty"`
	Nanopb     string `protobuf:"bytes,9,opt,name=nanopb,proto3" json:"nanopb,omitempty"`
	Mqtt       string `protobuf:"bytes,10,opt,name=mqtt,proto3" json:"mqtt,omitempty"`
}

func (x *Versions) Reset() {
	*x = Versions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Versions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Versions) ProtoMessage() {}

func (x *Versions) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Versions.ProtoReflect.Descriptor instead.
func (*Versions) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{15}
}

func (x *Versions) GetDomopool() string {
	if x != nil {
		return x.Domopool
	}
	return ""
}

func (x *Versions) GetPlatformio() uint32 {
	if x != nil {
		return x.Platformio
	}
	return 0
}

func (x *Versions) GetEspIdf() string {
	if x != nil {
		return x.EspIdf
	}
	return ""
}

func (x *Versions) GetXtensa() string {
	if x != nil {
		return x.Xtensa
	}
	return ""
}

func (x *Versions) GetTftEspi() string {
	if x != nil {
		return x.TftEspi
	}
	return ""
}

func (x *Versions) GetDallastemp() string {
	if x != nil {
		return x.Dallastemp
	}
	return ""
}

func (x *Versions) GetAds1115() string {
	if x != nil {
		return x.Ads1115
	}
	return ""
}

func (x *Versions) GetNanopb() string {
	if x != nil {
		return x.Nanopb
	}
	return ""
}

func (x *Versions) GetMqtt() string {
	if x != nil {
		return x.Mqtt
	}
	return ""
}

type Infos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Compile   string    `protobuf:"bytes,1,opt,name=compile,proto3" json:"compile,omitempty"`
	BoardName string    `protobuf:"bytes,2,opt,name=board_name,json=boardName,proto3" json:"board_name,omitempty"`
	Versions  *Versions `protobuf:"bytes,3,opt,name=versions,proto3" json:"versions,omitempty"`
}

func (x *Infos) Reset() {
	*x = Infos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Infos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Infos) ProtoMessage() {}

func (x *Infos) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Infos.ProtoReflect.Descriptor instead.
func (*Infos) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{16}
}

func (x *Infos) GetCompile() string {
	if x != nil {
		return x.Compile
	}
	return ""
}

func (x *Infos) GetBoardName() string {
	if x != nil {
		return x.BoardName
	}
	return ""
}

func (x *Infos) GetVersions() *Versions {
	if x != nil {
		return x.Versions
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Sensors *Sensors `protobuf:"bytes,2,opt,name=sensors,proto3" json:"sensors,omitempty"`
	Global  *Global  `protobuf:"bytes,3,opt,name=global,proto3" json:"global,omitempty"`
	Pump    *Pump    `protobuf:"bytes,5,opt,name=pump,proto3" json:"pump,omitempty"`
	Metrics *Metrics `protobuf:"bytes,6,opt,name=metrics,proto3" json:"metrics,omitempty"`
	States  *States  `protobuf:"bytes,7,opt,name=states,proto3" json:"states,omitempty"`
	Alarms  *Alarms  `protobuf:"bytes,8,opt,name=alarms,proto3" json:"alarms,omitempty"`
	Tests   *Tests   `protobuf:"bytes,9,opt,name=tests,proto3" json:"tests,omitempty"`
	Infos   *Infos   `protobuf:"bytes,10,opt,name=infos,proto3" json:"infos,omitempty"`
	Limits  *Limits  `protobuf:"bytes,11,opt,name=limits,proto3" json:"limits,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{17}
}

func (x *Config) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Config) GetSensors() *Sensors {
	if x != nil {
		return x.Sensors
	}
	return nil
}

func (x *Config) GetGlobal() *Global {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *Config) GetPump() *Pump {
	if x != nil {
		return x.Pump
	}
	return nil
}

func (x *Config) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Config) GetStates() *States {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *Config) GetAlarms() *Alarms {
	if x != nil {
		return x.Alarms
	}
	return nil
}

func (x *Config) GetTests() *Tests {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *Config) GetInfos() *Infos {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *Config) GetLimits() *Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

type Relay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State     RelayStates `protobuf:"varint,1,opt,name=state,proto3,enum=domopool.RelayStates" json:"state,omitempty"`
	Relay     RelayNames  `protobuf:"varint,2,opt,name=relay,proto3,enum=domopool.RelayNames" json:"relay,omitempty"`
	Duration  uint32      `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	StartTime uint32      `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *Relay) Reset() {
	*x = Relay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domopool_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relay) ProtoMessage() {}

func (x *Relay) ProtoReflect() protoreflect.Message {
	mi := &file_domopool_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relay.ProtoReflect.Descriptor instead.
func (*Relay) Descriptor() ([]byte, []int) {
	return file_domopool_proto_rawDescGZIP(), []int{18}
}

func (x *Relay) GetState() RelayStates {
	if x != nil {
		return x.State
	}
	return RelayStates_auto
}

func (x *Relay) GetRelay() RelayNames {
	if x != nil {
		return x.Relay
	}
	return RelayNames_filter
}

func (x *Relay) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Relay) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

var File_domopool_proto protoreflect.FileDescriptor

var file_domopool_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x56, 0x0a, 0x03, 0x4e, 0x54,
	0x50, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x22, 0x38, 0x0a, 0x04, 0x4d, 0x71, 0x74, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x68, 0x63, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x71, 0x74, 0x74, 0x52,
	0x04, 0x6d, 0x71, 0x74, 0x74, 0x12, 0x1f, 0x0a, 0x03, 0x6e, 0x74, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4e, 0x54,
	0x50, 0x52, 0x03, 0x6e, 0x74, 0x70, 0x22, 0x48, 0x0a, 0x04, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x22, 0xc3, 0x03, 0x0a, 0x06, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x77,
	0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x70, 0x4d,
	0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x77, 0x70, 0x4d, 0x61, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x68, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x68, 0x4d, 0x69, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x70, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x70, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x68, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x63, 0x68, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x68, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x57, 0x61, 0x69, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x68, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x68, 0x57, 0x61, 0x69, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x48, 0x69, 0x67, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x68,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x6c, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x68, 0x54, 0x65, 0x6d,
	0x70, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x77, 0x12, 0x1e, 0x0a,
	0x0b, 0x77, 0x70, 0x5f, 0x30, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x77, 0x70, 0x30, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74,
	0x77, 0x4d, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x77, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x77, 0x4d, 0x61, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x6d, 0x62, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74,
	0x61, 0x6d, 0x62, 0x4d, 0x69, 0x6e, 0x22, 0xfc, 0x01, 0x0a, 0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x64, 0x63, 0x5f, 0x70, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x61, 0x64, 0x63, 0x50, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6d, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x76, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x76, 0x6d, 0x61, 0x78, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x63, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75,
	0x74, 0x6f, 0x43, 0x61, 0x6c, 0x22, 0xcc, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x77, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x77, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x77, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x52, 0x05, 0x74, 0x77, 0x6f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x74,
	0x61, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6d, 0x6f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x61, 0x6d, 0x62, 0x12,
	0x2e, 0x0a, 0x13, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x02, 0x70, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x02, 0x70, 0x68, 0x12, 0x26, 0x0a, 0x02, 0x63,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52,
	0x02, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x02, 0x77, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x02, 0x77, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x64, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61,
	0x64, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x63, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x64,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x63,
	0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x63,
	0x47, 0x61, 0x69, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x06, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12,
	0x34, 0x0a, 0x16, 0x6c, 0x63, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x6c, 0x63, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x6b,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x5f,
	0x74, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x63, 0x6b, 0x54,
	0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4f,
	0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x64, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x77, 0x64, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x89, 0x02, 0x0a, 0x04, 0x50, 0x75, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x50, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x0c, 0x41,
	0x64, 0x73, 0x31, 0x31, 0x35, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x6c,
	0x0a, 0x0a, 0x4d, 0x71, 0x74, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x73, 0x22, 0xce, 0x02, 0x0a,
	0x06, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x70, 0x68, 0x12,
	0x0e, 0x0a, 0x02, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x63, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x74, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x74,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x70, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x77, 0x70, 0x48, 0x69, 0x67, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x70,
	0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x70, 0x4c, 0x6f,
	0x77, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x70, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x70, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30,
	0x0a, 0x07, 0x61, 0x64, 0x73, 0x31, 0x31, 0x31, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x64, 0x73, 0x31, 0x31,
	0x35, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x07, 0x61, 0x64, 0x73, 0x31, 0x31, 0x31, 0x35,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x77, 0x5f, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x74, 0x77, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x77, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x77,
	0x48, 0x69, 0x67, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x6d, 0x62, 0x5f, 0x66, 0x72, 0x6f,
	0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x61, 0x6d, 0x62, 0x46, 0x72,
	0x6f, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x71, 0x74,
	0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x22, 0x79, 0x0a,
	0x05, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x74, 0x77, 0x61, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x6d, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x61, 0x6d, 0x62, 0x12, 0x0e, 0x0a, 0x02,
	0x70, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x70, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x74, 0x61, 0x6d, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x74, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x64, 0x54, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x02, 0x70, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x02, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x77, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x02, 0x77, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x70, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x70, 0x56, 0x6f, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x17,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x5f, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x68, 0x54, 0x48, 0x69, 0x67, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x17, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x5f, 0x74,
	0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x68, 0x54, 0x4c, 0x6f, 0x77,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xa6, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x68, 0x5f, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x70, 0x68, 0x4f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x68, 0x5f, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x68, 0x4f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x74, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x74, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x74, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x74, 0x63, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x71, 0x74, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6d, 0x71, 0x74, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x22, 0xf8, 0x01, 0x0a, 0x08, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x69, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x73, 0x70, 0x49, 0x64, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x66, 0x74, 0x5f, 0x65, 0x73, 0x70, 0x69, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x66, 0x74, 0x45, 0x73, 0x70, 0x69, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x61, 0x6c, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x6c, 0x6c, 0x61, 0x73, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x73, 0x31, 0x31, 0x31, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x73, 0x31, 0x31, 0x31, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6e, 0x6f,
	0x70, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x62,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x71, 0x74, 0x74, 0x22, 0x70, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa9, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2b,
	0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x73, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f,
	0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x75, 0x6d, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x50,
	0x75, 0x6d, 0x70, 0x52, 0x04, 0x70, 0x75, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6f, 0x6d,
	0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6f, 0x6d, 0x6f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x6d, 0x6f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x6f,
	0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x6d, 0x6f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x2a, 0x2d, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x10,
	0x02, 0x2a, 0x34, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x0a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x63, 0x68, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x70, 0x68, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x03, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6c, 0x67, 0x6f, 0x74, 0x68, 0x33, 0x31, 0x2f,
	0x64, 0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x64,
	0x6f, 0x6d, 0x6f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_domopool_proto_rawDescOnce sync.Once
	file_domopool_proto_rawDescData = file_domopool_proto_rawDesc
)

func file_domopool_proto_rawDescGZIP() []byte {
	file_domopool_proto_rawDescOnce.Do(func() {
		file_domopool_proto_rawDescData = protoimpl.X.CompressGZIP(file_domopool_proto_rawDescData)
	})
	return file_domopool_proto_rawDescData
}

var file_domopool_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_domopool_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_domopool_proto_goTypes = []interface{}{
	(RelayStates)(0),     // 0: domopool.Relay_states
	(RelayNames)(0),      // 1: domopool.Relay_names
	(*NTP)(nil),          // 2: domopool.NTP
	(*Mqtt)(nil),         // 3: domopool.Mqtt
	(*Network)(nil),      // 4: domopool.Network
	(*Temp)(nil),         // 5: domopool.Temp
	(*Limits)(nil),       // 6: domopool.Limits
	(*AnalogSensor)(nil), // 7: domopool.AnalogSensor
	(*Sensors)(nil),      // 8: domopool.Sensors
	(*Global)(nil),       // 9: domopool.Global
	(*Pump)(nil),         // 10: domopool.Pump
	(*Ads115Alarms)(nil), // 11: domopool.Ads115Alarms
	(*MqttAlarms)(nil),   // 12: domopool.MqttAlarms
	(*Alarms)(nil),       // 13: domopool.Alarms
	(*Tests)(nil),        // 14: domopool.Tests
	(*Metrics)(nil),      // 15: domopool.Metrics
	(*States)(nil),       // 16: domopool.States
	(*Versions)(nil),     // 17: domopool.Versions
	(*Infos)(nil),        // 18: domopool.Infos
	(*Config)(nil),       // 19: domopool.Config
	(*Relay)(nil),        // 20: domopool.Relay
}
var file_domopool_proto_depIdxs = []int32{
	3,  // 0: domopool.Network.mqtt:type_name -> domopool.Mqtt
	2,  // 1: domopool.Network.ntp:type_name -> domopool.NTP
	5,  // 2: domopool.Sensors.twin:type_name -> domopool.Temp
	5,  // 3: domopool.Sensors.twout:type_name -> domopool.Temp
	5,  // 4: domopool.Sensors.tamb:type_name -> domopool.Temp
	7,  // 5: domopool.Sensors.ph:type_name -> domopool.AnalogSensor
	7,  // 6: domopool.Sensors.ch:type_name -> domopool.AnalogSensor
	7,  // 7: domopool.Sensors.wp:type_name -> domopool.AnalogSensor
	11, // 8: domopool.Alarms.ads1115:type_name -> domopool.Ads115Alarms
	12, // 9: domopool.Alarms.mqtt:type_name -> domopool.MqttAlarms
	17, // 10: domopool.Infos.versions:type_name -> domopool.Versions
	4,  // 11: domopool.Config.network:type_name -> domopool.Network
	8,  // 12: domopool.Config.sensors:type_name -> domopool.Sensors
	9,  // 13: domopool.Config.global:type_name -> domopool.Global
	10, // 14: domopool.Config.pump:type_name -> domopool.Pump
	15, // 15: domopool.Config.metrics:type_name -> domopool.Metrics
	16, // 16: domopool.Config.states:type_name -> domopool.States
	13, // 17: domopool.Config.alarms:type_name -> domopool.Alarms
	14, // 18: domopool.Config.tests:type_name -> domopool.Tests
	18, // 19: domopool.Config.infos:type_name -> domopool.Infos
	6,  // 20: domopool.Config.limits:type_name -> domopool.Limits
	0,  // 21: domopool.Relay.state:type_name -> domopool.Relay_states
	1,  // 22: domopool.Relay.relay:type_name -> domopool.Relay_names
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_domopool_proto_init() }
func file_domopool_proto_init() {
	if File_domopool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_domopool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mqtt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Temp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Limits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalogSensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Global); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ads115Alarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MqttAlarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alarms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*States); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Versions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Infos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domopool_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_domopool_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_domopool_proto_goTypes,
		DependencyIndexes: file_domopool_proto_depIdxs,
		EnumInfos:         file_domopool_proto_enumTypes,
		MessageInfos:      file_domopool_proto_msgTypes,
	}.Build()
	File_domopool_proto = out.File
	file_domopool_proto_rawDesc = nil
	file_domopool_proto_goTypes = nil
	file_domopool_proto_depIdxs = nil
}
