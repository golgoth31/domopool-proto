// source: domopool.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
goog.exportSymbol('proto.domopool.Ads115Alarms', null, global);
goog.exportSymbol('proto.domopool.Alarms', null, global);
goog.exportSymbol('proto.domopool.AnalogSensor', null, global);
goog.exportSymbol('proto.domopool.Config', null, global);
goog.exportSymbol('proto.domopool.Global', null, global);
goog.exportSymbol('proto.domopool.Infos', null, global);
goog.exportSymbol('proto.domopool.Limits', null, global);
goog.exportSymbol('proto.domopool.Metrics', null, global);
goog.exportSymbol('proto.domopool.Mqtt', null, global);
goog.exportSymbol('proto.domopool.MqttAlarms', null, global);
goog.exportSymbol('proto.domopool.NTP', null, global);
goog.exportSymbol('proto.domopool.Network', null, global);
goog.exportSymbol('proto.domopool.Pump', null, global);
goog.exportSymbol('proto.domopool.Relay', null, global);
goog.exportSymbol('proto.domopool.Relay_names', null, global);
goog.exportSymbol('proto.domopool.Relay_states', null, global);
goog.exportSymbol('proto.domopool.Sensors', null, global);
goog.exportSymbol('proto.domopool.States', null, global);
goog.exportSymbol('proto.domopool.Temp', null, global);
goog.exportSymbol('proto.domopool.Tests', null, global);
goog.exportSymbol('proto.domopool.Versions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.NTP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.NTP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.NTP.displayName = 'proto.domopool.NTP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Mqtt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Mqtt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Mqtt.displayName = 'proto.domopool.Mqtt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Network = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Network, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Network.displayName = 'proto.domopool.Network';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Temp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.domopool.Temp.repeatedFields_, null);
};
goog.inherits(proto.domopool.Temp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Temp.displayName = 'proto.domopool.Temp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Limits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Limits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Limits.displayName = 'proto.domopool.Limits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.AnalogSensor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.AnalogSensor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.AnalogSensor.displayName = 'proto.domopool.AnalogSensor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Sensors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Sensors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Sensors.displayName = 'proto.domopool.Sensors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Global = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Global, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Global.displayName = 'proto.domopool.Global';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Pump = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Pump, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Pump.displayName = 'proto.domopool.Pump';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Ads115Alarms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Ads115Alarms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Ads115Alarms.displayName = 'proto.domopool.Ads115Alarms';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.MqttAlarms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.MqttAlarms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.MqttAlarms.displayName = 'proto.domopool.MqttAlarms';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Alarms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Alarms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Alarms.displayName = 'proto.domopool.Alarms';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Tests = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Tests, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Tests.displayName = 'proto.domopool.Tests';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Metrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Metrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Metrics.displayName = 'proto.domopool.Metrics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.States = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.States, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.States.displayName = 'proto.domopool.States';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Versions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Versions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Versions.displayName = 'proto.domopool.Versions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Infos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Infos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Infos.displayName = 'proto.domopool.Infos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Config.displayName = 'proto.domopool.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.domopool.Relay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.domopool.Relay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.domopool.Relay.displayName = 'proto.domopool.Relay';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.NTP.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.NTP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.NTP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.NTP.toObject = function(includeInstance, msg) {
  var f, obj = {
    dayLight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    server: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timezone: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.NTP}
 */
proto.domopool.NTP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.NTP;
  return proto.domopool.NTP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.NTP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.NTP}
 */
proto.domopool.NTP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDayLight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimezone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.NTP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.NTP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.NTP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.NTP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDayLight();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getServer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimezone();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 day_light = 1;
 * @return {number}
 */
proto.domopool.NTP.prototype.getDayLight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.NTP} returns this
 */
proto.domopool.NTP.prototype.setDayLight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string server = 2;
 * @return {string}
 */
proto.domopool.NTP.prototype.getServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.NTP} returns this
 */
proto.domopool.NTP.prototype.setServer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 timezone = 3;
 * @return {number}
 */
proto.domopool.NTP.prototype.getTimezone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.NTP} returns this
 */
proto.domopool.NTP.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Mqtt.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Mqtt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Mqtt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Mqtt.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    server: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Mqtt}
 */
proto.domopool.Mqtt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Mqtt;
  return proto.domopool.Mqtt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Mqtt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Mqtt}
 */
proto.domopool.Mqtt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Mqtt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Mqtt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Mqtt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Mqtt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getServer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.domopool.Mqtt.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Mqtt} returns this
 */
proto.domopool.Mqtt.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string server = 2;
 * @return {string}
 */
proto.domopool.Mqtt.prototype.getServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Mqtt} returns this
 */
proto.domopool.Mqtt.prototype.setServer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Network.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Network.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Network} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Network.toObject = function(includeInstance, msg) {
  var f, obj = {
    dhcp: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    netmask: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gateway: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dns: jspb.Message.getFieldWithDefault(msg, 5, ""),
    allowPost: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    mqtt: (f = msg.getMqtt()) && proto.domopool.Mqtt.toObject(includeInstance, f),
    ntp: (f = msg.getNtp()) && proto.domopool.NTP.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Network}
 */
proto.domopool.Network.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Network;
  return proto.domopool.Network.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Network} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Network}
 */
proto.domopool.Network.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDhcp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetmask(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateway(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDns(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowPost(value);
      break;
    case 7:
      var value = new proto.domopool.Mqtt;
      reader.readMessage(value,proto.domopool.Mqtt.deserializeBinaryFromReader);
      msg.setMqtt(value);
      break;
    case 8:
      var value = new proto.domopool.NTP;
      reader.readMessage(value,proto.domopool.NTP.deserializeBinaryFromReader);
      msg.setNtp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Network.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Network.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Network} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Network.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDhcp();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNetmask();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGateway();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDns();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAllowPost();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getMqtt();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.domopool.Mqtt.serializeBinaryToWriter
    );
  }
  f = message.getNtp();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.domopool.NTP.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool dhcp = 1;
 * @return {boolean}
 */
proto.domopool.Network.prototype.getDhcp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Network} returns this
 */
proto.domopool.Network.prototype.setDhcp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.domopool.Network.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Network} returns this
 */
proto.domopool.Network.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string netmask = 3;
 * @return {string}
 */
proto.domopool.Network.prototype.getNetmask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Network} returns this
 */
proto.domopool.Network.prototype.setNetmask = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string gateway = 4;
 * @return {string}
 */
proto.domopool.Network.prototype.getGateway = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Network} returns this
 */
proto.domopool.Network.prototype.setGateway = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string dns = 5;
 * @return {string}
 */
proto.domopool.Network.prototype.getDns = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Network} returns this
 */
proto.domopool.Network.prototype.setDns = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool allow_post = 6;
 * @return {boolean}
 */
proto.domopool.Network.prototype.getAllowPost = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Network} returns this
 */
proto.domopool.Network.prototype.setAllowPost = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional Mqtt mqtt = 7;
 * @return {?proto.domopool.Mqtt}
 */
proto.domopool.Network.prototype.getMqtt = function() {
  return /** @type{?proto.domopool.Mqtt} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Mqtt, 7));
};


/**
 * @param {?proto.domopool.Mqtt|undefined} value
 * @return {!proto.domopool.Network} returns this
*/
proto.domopool.Network.prototype.setMqtt = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Network} returns this
 */
proto.domopool.Network.prototype.clearMqtt = function() {
  return this.setMqtt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Network.prototype.hasMqtt = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional NTP ntp = 8;
 * @return {?proto.domopool.NTP}
 */
proto.domopool.Network.prototype.getNtp = function() {
  return /** @type{?proto.domopool.NTP} */ (
    jspb.Message.getWrapperField(this, proto.domopool.NTP, 8));
};


/**
 * @param {?proto.domopool.NTP|undefined} value
 * @return {!proto.domopool.Network} returns this
*/
proto.domopool.Network.prototype.setNtp = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Network} returns this
 */
proto.domopool.Network.prototype.clearNtp = function() {
  return this.setNtp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Network.prototype.hasNtp = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.domopool.Temp.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Temp.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Temp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Temp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Temp.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    init: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    addrList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Temp}
 */
proto.domopool.Temp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Temp;
  return proto.domopool.Temp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Temp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Temp}
 */
proto.domopool.Temp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInit(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setAddrList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Temp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Temp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Temp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Temp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInit();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAddrList();
  if (f.length > 0) {
    writer.writePackedUint32(
      8,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.domopool.Temp.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Temp} returns this
 */
proto.domopool.Temp.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool init = 2;
 * @return {boolean}
 */
proto.domopool.Temp.prototype.getInit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Temp} returns this
 */
proto.domopool.Temp.prototype.setInit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated uint32 addr = 8;
 * @return {!Array<number>}
 */
proto.domopool.Temp.prototype.getAddrList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.domopool.Temp} returns this
 */
proto.domopool.Temp.prototype.setAddrList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.domopool.Temp} returns this
 */
proto.domopool.Temp.prototype.addAddr = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.domopool.Temp} returns this
 */
proto.domopool.Temp.prototype.clearAddrList = function() {
  return this.setAddrList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Limits.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Limits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Limits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Limits.toObject = function(includeInstance, msg) {
  var f, obj = {
    wpMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    wpMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    phMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    phMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    chMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    chMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    waitBeforeCh: jspb.Message.getFieldWithDefault(msg, 7, 0),
    chTempThreshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    chTempWaitReset: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    wp0Derive: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    twMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    twMax: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    tambMin: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Limits}
 */
proto.domopool.Limits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Limits;
  return proto.domopool.Limits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Limits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Limits}
 */
proto.domopool.Limits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWpMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWpMax(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPhMin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPhMax(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChMin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChMax(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWaitBeforeCh(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChTempThreshold(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChTempWaitReset(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWp0Derive(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTwMin(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTwMax(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTambMin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Limits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Limits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Limits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Limits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWpMin();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getWpMax();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getPhMin();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getPhMax();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getChMin();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getChMax();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getWaitBeforeCh();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getChTempThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getChTempWaitReset();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getWp0Derive();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getTwMin();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getTwMax();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getTambMin();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
};


/**
 * optional float wp_min = 1;
 * @return {number}
 */
proto.domopool.Limits.prototype.getWpMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setWpMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float wp_max = 2;
 * @return {number}
 */
proto.domopool.Limits.prototype.getWpMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setWpMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float ph_min = 3;
 * @return {number}
 */
proto.domopool.Limits.prototype.getPhMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setPhMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float ph_max = 4;
 * @return {number}
 */
proto.domopool.Limits.prototype.getPhMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setPhMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float ch_min = 5;
 * @return {number}
 */
proto.domopool.Limits.prototype.getChMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setChMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float ch_max = 6;
 * @return {number}
 */
proto.domopool.Limits.prototype.getChMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setChMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional uint32 wait_before_ch = 7;
 * @return {number}
 */
proto.domopool.Limits.prototype.getWaitBeforeCh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setWaitBeforeCh = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float ch_temp_threshold = 8;
 * @return {number}
 */
proto.domopool.Limits.prototype.getChTempThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setChTempThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float ch_temp_wait_reset = 9;
 * @return {number}
 */
proto.domopool.Limits.prototype.getChTempWaitReset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setChTempWaitReset = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float wp_0_derive = 10;
 * @return {number}
 */
proto.domopool.Limits.prototype.getWp0Derive = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setWp0Derive = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float tw_min = 11;
 * @return {number}
 */
proto.domopool.Limits.prototype.getTwMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setTwMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float tw_max = 12;
 * @return {number}
 */
proto.domopool.Limits.prototype.getTwMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setTwMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float tamb_min = 13;
 * @return {number}
 */
proto.domopool.Limits.prototype.getTambMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Limits} returns this
 */
proto.domopool.Limits.prototype.setTambMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.AnalogSensor.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.AnalogSensor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.AnalogSensor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.AnalogSensor.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    adcPin: jspb.Message.getFieldWithDefault(msg, 3, 0),
    threshold: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    thresholdAccuracy: jspb.Message.getFieldWithDefault(msg, 4, 0),
    vmin: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    vmax: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    precisionFactor: jspb.Message.getFieldWithDefault(msg, 7, 0),
    autoCal: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.AnalogSensor}
 */
proto.domopool.AnalogSensor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.AnalogSensor;
  return proto.domopool.AnalogSensor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.AnalogSensor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.AnalogSensor}
 */
proto.domopool.AnalogSensor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdcPin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThreshold(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThresholdAccuracy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVmin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVmax(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrecisionFactor(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoCal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.AnalogSensor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.AnalogSensor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.AnalogSensor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.AnalogSensor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAdcPin();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getThreshold();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getThresholdAccuracy();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getVmin();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getVmax();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getPrecisionFactor();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getAutoCal();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.domopool.AnalogSensor.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.AnalogSensor} returns this
 */
proto.domopool.AnalogSensor.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional uint32 adc_pin = 3;
 * @return {number}
 */
proto.domopool.AnalogSensor.prototype.getAdcPin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.AnalogSensor} returns this
 */
proto.domopool.AnalogSensor.prototype.setAdcPin = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float threshold = 2;
 * @return {number}
 */
proto.domopool.AnalogSensor.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.AnalogSensor} returns this
 */
proto.domopool.AnalogSensor.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional uint32 threshold_accuracy = 4;
 * @return {number}
 */
proto.domopool.AnalogSensor.prototype.getThresholdAccuracy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.AnalogSensor} returns this
 */
proto.domopool.AnalogSensor.prototype.setThresholdAccuracy = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float vmin = 5;
 * @return {number}
 */
proto.domopool.AnalogSensor.prototype.getVmin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.AnalogSensor} returns this
 */
proto.domopool.AnalogSensor.prototype.setVmin = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float vmax = 6;
 * @return {number}
 */
proto.domopool.AnalogSensor.prototype.getVmax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.AnalogSensor} returns this
 */
proto.domopool.AnalogSensor.prototype.setVmax = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional uint32 precision_factor = 7;
 * @return {number}
 */
proto.domopool.AnalogSensor.prototype.getPrecisionFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.AnalogSensor} returns this
 */
proto.domopool.AnalogSensor.prototype.setPrecisionFactor = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool auto_cal = 8;
 * @return {boolean}
 */
proto.domopool.AnalogSensor.prototype.getAutoCal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.AnalogSensor} returns this
 */
proto.domopool.AnalogSensor.prototype.setAutoCal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Sensors.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Sensors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Sensors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Sensors.toObject = function(includeInstance, msg) {
  var f, obj = {
    twin: (f = msg.getTwin()) && proto.domopool.Temp.toObject(includeInstance, f),
    twout: (f = msg.getTwout()) && proto.domopool.Temp.toObject(includeInstance, f),
    tamb: (f = msg.getTamb()) && proto.domopool.Temp.toObject(includeInstance, f),
    waitForConversion: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    tempResolution: jspb.Message.getFieldWithDefault(msg, 5, 0),
    precisionFactor: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ph: (f = msg.getPh()) && proto.domopool.AnalogSensor.toObject(includeInstance, f),
    ch: (f = msg.getCh()) && proto.domopool.AnalogSensor.toObject(includeInstance, f),
    wp: (f = msg.getWp()) && proto.domopool.AnalogSensor.toObject(includeInstance, f),
    adcMode: jspb.Message.getFieldWithDefault(msg, 10, 0),
    adcDatarate: jspb.Message.getFieldWithDefault(msg, 11, 0),
    adcGain: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Sensors}
 */
proto.domopool.Sensors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Sensors;
  return proto.domopool.Sensors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Sensors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Sensors}
 */
proto.domopool.Sensors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domopool.Temp;
      reader.readMessage(value,proto.domopool.Temp.deserializeBinaryFromReader);
      msg.setTwin(value);
      break;
    case 2:
      var value = new proto.domopool.Temp;
      reader.readMessage(value,proto.domopool.Temp.deserializeBinaryFromReader);
      msg.setTwout(value);
      break;
    case 3:
      var value = new proto.domopool.Temp;
      reader.readMessage(value,proto.domopool.Temp.deserializeBinaryFromReader);
      msg.setTamb(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWaitForConversion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTempResolution(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrecisionFactor(value);
      break;
    case 7:
      var value = new proto.domopool.AnalogSensor;
      reader.readMessage(value,proto.domopool.AnalogSensor.deserializeBinaryFromReader);
      msg.setPh(value);
      break;
    case 8:
      var value = new proto.domopool.AnalogSensor;
      reader.readMessage(value,proto.domopool.AnalogSensor.deserializeBinaryFromReader);
      msg.setCh(value);
      break;
    case 9:
      var value = new proto.domopool.AnalogSensor;
      reader.readMessage(value,proto.domopool.AnalogSensor.deserializeBinaryFromReader);
      msg.setWp(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdcMode(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdcDatarate(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdcGain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Sensors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Sensors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Sensors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Sensors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTwin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.domopool.Temp.serializeBinaryToWriter
    );
  }
  f = message.getTwout();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.domopool.Temp.serializeBinaryToWriter
    );
  }
  f = message.getTamb();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.domopool.Temp.serializeBinaryToWriter
    );
  }
  f = message.getWaitForConversion();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTempResolution();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getPrecisionFactor();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getPh();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.domopool.AnalogSensor.serializeBinaryToWriter
    );
  }
  f = message.getCh();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.domopool.AnalogSensor.serializeBinaryToWriter
    );
  }
  f = message.getWp();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.domopool.AnalogSensor.serializeBinaryToWriter
    );
  }
  f = message.getAdcMode();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getAdcDatarate();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getAdcGain();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
};


/**
 * optional Temp twin = 1;
 * @return {?proto.domopool.Temp}
 */
proto.domopool.Sensors.prototype.getTwin = function() {
  return /** @type{?proto.domopool.Temp} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Temp, 1));
};


/**
 * @param {?proto.domopool.Temp|undefined} value
 * @return {!proto.domopool.Sensors} returns this
*/
proto.domopool.Sensors.prototype.setTwin = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.clearTwin = function() {
  return this.setTwin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Sensors.prototype.hasTwin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Temp twout = 2;
 * @return {?proto.domopool.Temp}
 */
proto.domopool.Sensors.prototype.getTwout = function() {
  return /** @type{?proto.domopool.Temp} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Temp, 2));
};


/**
 * @param {?proto.domopool.Temp|undefined} value
 * @return {!proto.domopool.Sensors} returns this
*/
proto.domopool.Sensors.prototype.setTwout = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.clearTwout = function() {
  return this.setTwout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Sensors.prototype.hasTwout = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Temp tamb = 3;
 * @return {?proto.domopool.Temp}
 */
proto.domopool.Sensors.prototype.getTamb = function() {
  return /** @type{?proto.domopool.Temp} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Temp, 3));
};


/**
 * @param {?proto.domopool.Temp|undefined} value
 * @return {!proto.domopool.Sensors} returns this
*/
proto.domopool.Sensors.prototype.setTamb = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.clearTamb = function() {
  return this.setTamb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Sensors.prototype.hasTamb = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool wait_for_conversion = 4;
 * @return {boolean}
 */
proto.domopool.Sensors.prototype.getWaitForConversion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.setWaitForConversion = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint32 temp_resolution = 5;
 * @return {number}
 */
proto.domopool.Sensors.prototype.getTempResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.setTempResolution = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 precision_factor = 6;
 * @return {number}
 */
proto.domopool.Sensors.prototype.getPrecisionFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.setPrecisionFactor = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional AnalogSensor ph = 7;
 * @return {?proto.domopool.AnalogSensor}
 */
proto.domopool.Sensors.prototype.getPh = function() {
  return /** @type{?proto.domopool.AnalogSensor} */ (
    jspb.Message.getWrapperField(this, proto.domopool.AnalogSensor, 7));
};


/**
 * @param {?proto.domopool.AnalogSensor|undefined} value
 * @return {!proto.domopool.Sensors} returns this
*/
proto.domopool.Sensors.prototype.setPh = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.clearPh = function() {
  return this.setPh(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Sensors.prototype.hasPh = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional AnalogSensor ch = 8;
 * @return {?proto.domopool.AnalogSensor}
 */
proto.domopool.Sensors.prototype.getCh = function() {
  return /** @type{?proto.domopool.AnalogSensor} */ (
    jspb.Message.getWrapperField(this, proto.domopool.AnalogSensor, 8));
};


/**
 * @param {?proto.domopool.AnalogSensor|undefined} value
 * @return {!proto.domopool.Sensors} returns this
*/
proto.domopool.Sensors.prototype.setCh = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.clearCh = function() {
  return this.setCh(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Sensors.prototype.hasCh = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional AnalogSensor wp = 9;
 * @return {?proto.domopool.AnalogSensor}
 */
proto.domopool.Sensors.prototype.getWp = function() {
  return /** @type{?proto.domopool.AnalogSensor} */ (
    jspb.Message.getWrapperField(this, proto.domopool.AnalogSensor, 9));
};


/**
 * @param {?proto.domopool.AnalogSensor|undefined} value
 * @return {!proto.domopool.Sensors} returns this
*/
proto.domopool.Sensors.prototype.setWp = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.clearWp = function() {
  return this.setWp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Sensors.prototype.hasWp = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 adc_mode = 10;
 * @return {number}
 */
proto.domopool.Sensors.prototype.getAdcMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.setAdcMode = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint32 adc_datarate = 11;
 * @return {number}
 */
proto.domopool.Sensors.prototype.getAdcDatarate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.setAdcDatarate = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint32 adc_gain = 12;
 * @return {number}
 */
proto.domopool.Sensors.prototype.getAdcGain = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Sensors} returns this
 */
proto.domopool.Sensors.prototype.setAdcGain = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Global.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Global.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Global} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Global.toObject = function(includeInstance, msg) {
  var f, obj = {
    lcdBacklightDuration: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ackDuration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ackTone: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    serialOut: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    displayStartup: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    forceLight: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Global}
 */
proto.domopool.Global.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Global;
  return proto.domopool.Global.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Global} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Global}
 */
proto.domopool.Global.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLcdBacklightDuration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAckDuration(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAckTone(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSerialOut(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisplayStartup(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceLight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Global.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Global.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Global} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Global.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLcdBacklightDuration();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAckDuration();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAckTone();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getSerialOut();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDisplayStartup();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getForceLight();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional uint32 lcd_backlight_duration = 1;
 * @return {number}
 */
proto.domopool.Global.prototype.getLcdBacklightDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Global} returns this
 */
proto.domopool.Global.prototype.setLcdBacklightDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 ack_duration = 2;
 * @return {number}
 */
proto.domopool.Global.prototype.getAckDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Global} returns this
 */
proto.domopool.Global.prototype.setAckDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double ack_tone = 3;
 * @return {number}
 */
proto.domopool.Global.prototype.getAckTone = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Global} returns this
 */
proto.domopool.Global.prototype.setAckTone = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional bool serial_out = 4;
 * @return {boolean}
 */
proto.domopool.Global.prototype.getSerialOut = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Global} returns this
 */
proto.domopool.Global.prototype.setSerialOut = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool display_startup = 5;
 * @return {boolean}
 */
proto.domopool.Global.prototype.getDisplayStartup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Global} returns this
 */
proto.domopool.Global.prototype.setDisplayStartup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool force_light = 6;
 * @return {boolean}
 */
proto.domopool.Global.prototype.getForceLight = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Global} returns this
 */
proto.domopool.Global.prototype.setForceLight = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Pump.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Pump.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Pump} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Pump.toObject = function(includeInstance, msg) {
  var f, obj = {
    forceFilter: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    forcePh: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    forceCh: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    automatic: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    forceCheck: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    forceDuration: jspb.Message.getFieldWithDefault(msg, 6, 0),
    forceStartTime: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Pump}
 */
proto.domopool.Pump.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Pump;
  return proto.domopool.Pump.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Pump} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Pump}
 */
proto.domopool.Pump.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceFilter(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForcePh(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceCh(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutomatic(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForceCheck(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setForceDuration(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setForceStartTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Pump.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Pump.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Pump} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Pump.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getForceFilter();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getForcePh();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getForceCh();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAutomatic();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getForceCheck();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getForceDuration();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getForceStartTime();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional bool force_filter = 1;
 * @return {boolean}
 */
proto.domopool.Pump.prototype.getForceFilter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Pump} returns this
 */
proto.domopool.Pump.prototype.setForceFilter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool force_ph = 2;
 * @return {boolean}
 */
proto.domopool.Pump.prototype.getForcePh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Pump} returns this
 */
proto.domopool.Pump.prototype.setForcePh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool force_ch = 3;
 * @return {boolean}
 */
proto.domopool.Pump.prototype.getForceCh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Pump} returns this
 */
proto.domopool.Pump.prototype.setForceCh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool automatic = 4;
 * @return {boolean}
 */
proto.domopool.Pump.prototype.getAutomatic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Pump} returns this
 */
proto.domopool.Pump.prototype.setAutomatic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool force_check = 5;
 * @return {boolean}
 */
proto.domopool.Pump.prototype.getForceCheck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Pump} returns this
 */
proto.domopool.Pump.prototype.setForceCheck = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 force_duration = 6;
 * @return {number}
 */
proto.domopool.Pump.prototype.getForceDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Pump} returns this
 */
proto.domopool.Pump.prototype.setForceDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 force_start_time = 7;
 * @return {number}
 */
proto.domopool.Pump.prototype.getForceStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Pump} returns this
 */
proto.domopool.Pump.prototype.setForceStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Ads115Alarms.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Ads115Alarms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Ads115Alarms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Ads115Alarms.toObject = function(includeInstance, msg) {
  var f, obj = {
    notReady: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    notStarted: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    notConnected: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Ads115Alarms}
 */
proto.domopool.Ads115Alarms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Ads115Alarms;
  return proto.domopool.Ads115Alarms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Ads115Alarms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Ads115Alarms}
 */
proto.domopool.Ads115Alarms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotReady(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotStarted(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotConnected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Ads115Alarms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Ads115Alarms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Ads115Alarms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Ads115Alarms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotReady();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getNotStarted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getNotConnected();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bool not_ready = 1;
 * @return {boolean}
 */
proto.domopool.Ads115Alarms.prototype.getNotReady = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Ads115Alarms} returns this
 */
proto.domopool.Ads115Alarms.prototype.setNotReady = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool not_started = 2;
 * @return {boolean}
 */
proto.domopool.Ads115Alarms.prototype.getNotStarted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Ads115Alarms} returns this
 */
proto.domopool.Ads115Alarms.prototype.setNotStarted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool not_connected = 3;
 * @return {boolean}
 */
proto.domopool.Ads115Alarms.prototype.getNotConnected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Ads115Alarms} returns this
 */
proto.domopool.Ads115Alarms.prototype.setNotConnected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.MqttAlarms.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.MqttAlarms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.MqttAlarms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.MqttAlarms.toObject = function(includeInstance, msg) {
  var f, obj = {
    metrics: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    states: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.MqttAlarms}
 */
proto.domopool.MqttAlarms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.MqttAlarms;
  return proto.domopool.MqttAlarms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.MqttAlarms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.MqttAlarms}
 */
proto.domopool.MqttAlarms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMetrics(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.MqttAlarms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.MqttAlarms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.MqttAlarms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.MqttAlarms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetrics();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getStates();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool metrics = 1;
 * @return {boolean}
 */
proto.domopool.MqttAlarms.prototype.getMetrics = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.MqttAlarms} returns this
 */
proto.domopool.MqttAlarms.prototype.setMetrics = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool states = 2;
 * @return {boolean}
 */
proto.domopool.MqttAlarms.prototype.getStates = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.MqttAlarms} returns this
 */
proto.domopool.MqttAlarms.prototype.setStates = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Alarms.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Alarms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Alarms} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Alarms.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    ph: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    ch: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    rtc: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    wpHigh: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    wpLow: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    wpBroken: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    ads1115: (f = msg.getAds1115()) && proto.domopool.Ads115Alarms.toObject(includeInstance, f),
    twFrost: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    twHigh: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    tambFrost: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    mqtt: (f = msg.getMqtt()) && proto.domopool.MqttAlarms.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Alarms}
 */
proto.domopool.Alarms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Alarms;
  return proto.domopool.Alarms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Alarms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Alarms}
 */
proto.domopool.Alarms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFilter(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPh(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCh(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRtc(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWpHigh(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWpLow(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWpBroken(value);
      break;
    case 9:
      var value = new proto.domopool.Ads115Alarms;
      reader.readMessage(value,proto.domopool.Ads115Alarms.deserializeBinaryFromReader);
      msg.setAds1115(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTwFrost(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTwHigh(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTambFrost(value);
      break;
    case 13:
      var value = new proto.domopool.MqttAlarms;
      reader.readMessage(value,proto.domopool.MqttAlarms.deserializeBinaryFromReader);
      msg.setMqtt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Alarms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Alarms.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Alarms} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Alarms.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPh();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCh();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getRtc();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getWpHigh();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getWpLow();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getWpBroken();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getAds1115();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.domopool.Ads115Alarms.serializeBinaryToWriter
    );
  }
  f = message.getTwFrost();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getTwHigh();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getTambFrost();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getMqtt();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.domopool.MqttAlarms.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool filter = 1;
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.getFilter = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.setFilter = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool ph = 2;
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.getPh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.setPh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool ch = 3;
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.getCh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.setCh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool rtc = 5;
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.getRtc = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.setRtc = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool wp_high = 6;
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.getWpHigh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.setWpHigh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool wp_low = 7;
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.getWpLow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.setWpLow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool wp_broken = 8;
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.getWpBroken = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.setWpBroken = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional Ads115Alarms ads1115 = 9;
 * @return {?proto.domopool.Ads115Alarms}
 */
proto.domopool.Alarms.prototype.getAds1115 = function() {
  return /** @type{?proto.domopool.Ads115Alarms} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Ads115Alarms, 9));
};


/**
 * @param {?proto.domopool.Ads115Alarms|undefined} value
 * @return {!proto.domopool.Alarms} returns this
*/
proto.domopool.Alarms.prototype.setAds1115 = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.clearAds1115 = function() {
  return this.setAds1115(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.hasAds1115 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool tw_frost = 10;
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.getTwFrost = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.setTwFrost = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool tw_high = 11;
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.getTwHigh = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.setTwHigh = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool tamb_frost = 12;
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.getTambFrost = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.setTambFrost = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional MqttAlarms mqtt = 13;
 * @return {?proto.domopool.MqttAlarms}
 */
proto.domopool.Alarms.prototype.getMqtt = function() {
  return /** @type{?proto.domopool.MqttAlarms} */ (
    jspb.Message.getWrapperField(this, proto.domopool.MqttAlarms, 13));
};


/**
 * @param {?proto.domopool.MqttAlarms|undefined} value
 * @return {!proto.domopool.Alarms} returns this
*/
proto.domopool.Alarms.prototype.setMqtt = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Alarms} returns this
 */
proto.domopool.Alarms.prototype.clearMqtt = function() {
  return this.setMqtt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Alarms.prototype.hasMqtt = function() {
  return jspb.Message.getField(this, 13) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Tests.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Tests.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Tests} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Tests.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    twater: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    tamb: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    ph: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    pressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Tests}
 */
proto.domopool.Tests.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Tests;
  return proto.domopool.Tests.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Tests} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Tests}
 */
proto.domopool.Tests.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTwater(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTamb(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPh(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPressure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Tests.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Tests.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Tests} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Tests.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTwater();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getTamb();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getPh();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.domopool.Tests.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.Tests} returns this
 */
proto.domopool.Tests.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional float twater = 2;
 * @return {number}
 */
proto.domopool.Tests.prototype.getTwater = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Tests} returns this
 */
proto.domopool.Tests.prototype.setTwater = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float tamb = 3;
 * @return {number}
 */
proto.domopool.Tests.prototype.getTamb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Tests} returns this
 */
proto.domopool.Tests.prototype.setTamb = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float ph = 4;
 * @return {number}
 */
proto.domopool.Tests.prototype.getPh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Tests} returns this
 */
proto.domopool.Tests.prototype.setPh = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float pressure = 5;
 * @return {number}
 */
proto.domopool.Tests.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Tests} returns this
 */
proto.domopool.Tests.prototype.setPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Metrics.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Metrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Metrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Metrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    tamb: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    twater: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    savedTwater: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    ph: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    ch: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    wp: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    wpVolt: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    over15Duration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    hour: jspb.Message.getFieldWithDefault(msg, 9, 0),
    time: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Metrics}
 */
proto.domopool.Metrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Metrics;
  return proto.domopool.Metrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Metrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Metrics}
 */
proto.domopool.Metrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTamb(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTwater(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSavedTwater(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPh(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCh(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWpVolt(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOver15Duration(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHour(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Metrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Metrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Metrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Metrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTamb();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getTwater();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getSavedTwater();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getPh();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getCh();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getWp();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getWpVolt();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getOver15Duration();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getHour();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional float tamb = 1;
 * @return {number}
 */
proto.domopool.Metrics.prototype.getTamb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Metrics} returns this
 */
proto.domopool.Metrics.prototype.setTamb = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float twater = 2;
 * @return {number}
 */
proto.domopool.Metrics.prototype.getTwater = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Metrics} returns this
 */
proto.domopool.Metrics.prototype.setTwater = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float saved_twater = 3;
 * @return {number}
 */
proto.domopool.Metrics.prototype.getSavedTwater = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Metrics} returns this
 */
proto.domopool.Metrics.prototype.setSavedTwater = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float ph = 4;
 * @return {number}
 */
proto.domopool.Metrics.prototype.getPh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Metrics} returns this
 */
proto.domopool.Metrics.prototype.setPh = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float ch = 5;
 * @return {number}
 */
proto.domopool.Metrics.prototype.getCh = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Metrics} returns this
 */
proto.domopool.Metrics.prototype.setCh = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float wp = 6;
 * @return {number}
 */
proto.domopool.Metrics.prototype.getWp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Metrics} returns this
 */
proto.domopool.Metrics.prototype.setWp = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float wp_volt = 7;
 * @return {number}
 */
proto.domopool.Metrics.prototype.getWpVolt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Metrics} returns this
 */
proto.domopool.Metrics.prototype.setWpVolt = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional uint32 over_15_duration = 8;
 * @return {number}
 */
proto.domopool.Metrics.prototype.getOver15Duration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Metrics} returns this
 */
proto.domopool.Metrics.prototype.setOver15Duration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 hour = 9;
 * @return {number}
 */
proto.domopool.Metrics.prototype.getHour = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Metrics} returns this
 */
proto.domopool.Metrics.prototype.setHour = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint32 time = 10;
 * @return {number}
 */
proto.domopool.Metrics.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Metrics} returns this
 */
proto.domopool.Metrics.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.States.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.States.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.States} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.States.toObject = function(includeInstance, msg) {
  var f, obj = {
    startup: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    filterOn: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    phOn: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    chOn: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    automatic: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    netActive: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    ntp: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    rtc: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    lightOn: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    mqttConnected: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.States}
 */
proto.domopool.States.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.States;
  return proto.domopool.States.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.States} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.States}
 */
proto.domopool.States.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStartup(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFilterOn(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPhOn(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChOn(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutomatic(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNetActive(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNtp(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRtc(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLightOn(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMqttConnected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.States.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.States.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.States} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.States.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartup();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFilterOn();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPhOn();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getChOn();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getAutomatic();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getNetActive();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getNtp();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getRtc();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getLightOn();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getMqttConnected();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional bool startup = 1;
 * @return {boolean}
 */
proto.domopool.States.prototype.getStartup = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.States} returns this
 */
proto.domopool.States.prototype.setStartup = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool filter_on = 2;
 * @return {boolean}
 */
proto.domopool.States.prototype.getFilterOn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.States} returns this
 */
proto.domopool.States.prototype.setFilterOn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool ph_on = 3;
 * @return {boolean}
 */
proto.domopool.States.prototype.getPhOn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.States} returns this
 */
proto.domopool.States.prototype.setPhOn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool ch_on = 4;
 * @return {boolean}
 */
proto.domopool.States.prototype.getChOn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.States} returns this
 */
proto.domopool.States.prototype.setChOn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool automatic = 5;
 * @return {boolean}
 */
proto.domopool.States.prototype.getAutomatic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.States} returns this
 */
proto.domopool.States.prototype.setAutomatic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool net_active = 6;
 * @return {boolean}
 */
proto.domopool.States.prototype.getNetActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.States} returns this
 */
proto.domopool.States.prototype.setNetActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool ntp = 7;
 * @return {boolean}
 */
proto.domopool.States.prototype.getNtp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.States} returns this
 */
proto.domopool.States.prototype.setNtp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool rtc = 8;
 * @return {boolean}
 */
proto.domopool.States.prototype.getRtc = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.States} returns this
 */
proto.domopool.States.prototype.setRtc = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool light_on = 9;
 * @return {boolean}
 */
proto.domopool.States.prototype.getLightOn = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.States} returns this
 */
proto.domopool.States.prototype.setLightOn = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool mqtt_connected = 10;
 * @return {boolean}
 */
proto.domopool.States.prototype.getMqttConnected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.domopool.States} returns this
 */
proto.domopool.States.prototype.setMqttConnected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Versions.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Versions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Versions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Versions.toObject = function(includeInstance, msg) {
  var f, obj = {
    domopool: jspb.Message.getFieldWithDefault(msg, 1, ""),
    platformio: jspb.Message.getFieldWithDefault(msg, 2, 0),
    espIdf: jspb.Message.getFieldWithDefault(msg, 3, ""),
    xtensa: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tftEspi: jspb.Message.getFieldWithDefault(msg, 6, ""),
    dallastemp: jspb.Message.getFieldWithDefault(msg, 7, ""),
    ads1115: jspb.Message.getFieldWithDefault(msg, 8, ""),
    nanopb: jspb.Message.getFieldWithDefault(msg, 9, ""),
    mqtt: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Versions}
 */
proto.domopool.Versions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Versions;
  return proto.domopool.Versions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Versions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Versions}
 */
proto.domopool.Versions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomopool(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlatformio(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEspIdf(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setXtensa(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTftEspi(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDallastemp(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAds1115(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNanopb(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqtt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Versions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Versions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Versions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Versions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDomopool();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlatformio();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEspIdf();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getXtensa();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTftEspi();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDallastemp();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAds1115();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNanopb();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMqtt();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string domopool = 1;
 * @return {string}
 */
proto.domopool.Versions.prototype.getDomopool = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Versions} returns this
 */
proto.domopool.Versions.prototype.setDomopool = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 platformio = 2;
 * @return {number}
 */
proto.domopool.Versions.prototype.getPlatformio = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Versions} returns this
 */
proto.domopool.Versions.prototype.setPlatformio = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string esp_idf = 3;
 * @return {string}
 */
proto.domopool.Versions.prototype.getEspIdf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Versions} returns this
 */
proto.domopool.Versions.prototype.setEspIdf = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string xtensa = 4;
 * @return {string}
 */
proto.domopool.Versions.prototype.getXtensa = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Versions} returns this
 */
proto.domopool.Versions.prototype.setXtensa = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string tft_espi = 6;
 * @return {string}
 */
proto.domopool.Versions.prototype.getTftEspi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Versions} returns this
 */
proto.domopool.Versions.prototype.setTftEspi = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string dallastemp = 7;
 * @return {string}
 */
proto.domopool.Versions.prototype.getDallastemp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Versions} returns this
 */
proto.domopool.Versions.prototype.setDallastemp = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string ads1115 = 8;
 * @return {string}
 */
proto.domopool.Versions.prototype.getAds1115 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Versions} returns this
 */
proto.domopool.Versions.prototype.setAds1115 = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string nanopb = 9;
 * @return {string}
 */
proto.domopool.Versions.prototype.getNanopb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Versions} returns this
 */
proto.domopool.Versions.prototype.setNanopb = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string mqtt = 10;
 * @return {string}
 */
proto.domopool.Versions.prototype.getMqtt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Versions} returns this
 */
proto.domopool.Versions.prototype.setMqtt = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Infos.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Infos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Infos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Infos.toObject = function(includeInstance, msg) {
  var f, obj = {
    compile: jspb.Message.getFieldWithDefault(msg, 1, ""),
    boardName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    versions: (f = msg.getVersions()) && proto.domopool.Versions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Infos}
 */
proto.domopool.Infos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Infos;
  return proto.domopool.Infos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Infos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Infos}
 */
proto.domopool.Infos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompile(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardName(value);
      break;
    case 3:
      var value = new proto.domopool.Versions;
      reader.readMessage(value,proto.domopool.Versions.deserializeBinaryFromReader);
      msg.setVersions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Infos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Infos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Infos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Infos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompile();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBoardName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.domopool.Versions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string compile = 1;
 * @return {string}
 */
proto.domopool.Infos.prototype.getCompile = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Infos} returns this
 */
proto.domopool.Infos.prototype.setCompile = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string board_name = 2;
 * @return {string}
 */
proto.domopool.Infos.prototype.getBoardName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.domopool.Infos} returns this
 */
proto.domopool.Infos.prototype.setBoardName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Versions versions = 3;
 * @return {?proto.domopool.Versions}
 */
proto.domopool.Infos.prototype.getVersions = function() {
  return /** @type{?proto.domopool.Versions} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Versions, 3));
};


/**
 * @param {?proto.domopool.Versions|undefined} value
 * @return {!proto.domopool.Infos} returns this
*/
proto.domopool.Infos.prototype.setVersions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Infos} returns this
 */
proto.domopool.Infos.prototype.clearVersions = function() {
  return this.setVersions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Infos.prototype.hasVersions = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: (f = msg.getNetwork()) && proto.domopool.Network.toObject(includeInstance, f),
    sensors: (f = msg.getSensors()) && proto.domopool.Sensors.toObject(includeInstance, f),
    global: (f = msg.getGlobal()) && proto.domopool.Global.toObject(includeInstance, f),
    pump: (f = msg.getPump()) && proto.domopool.Pump.toObject(includeInstance, f),
    metrics: (f = msg.getMetrics()) && proto.domopool.Metrics.toObject(includeInstance, f),
    states: (f = msg.getStates()) && proto.domopool.States.toObject(includeInstance, f),
    alarms: (f = msg.getAlarms()) && proto.domopool.Alarms.toObject(includeInstance, f),
    tests: (f = msg.getTests()) && proto.domopool.Tests.toObject(includeInstance, f),
    infos: (f = msg.getInfos()) && proto.domopool.Infos.toObject(includeInstance, f),
    limits: (f = msg.getLimits()) && proto.domopool.Limits.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Config}
 */
proto.domopool.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Config;
  return proto.domopool.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Config}
 */
proto.domopool.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.domopool.Network;
      reader.readMessage(value,proto.domopool.Network.deserializeBinaryFromReader);
      msg.setNetwork(value);
      break;
    case 2:
      var value = new proto.domopool.Sensors;
      reader.readMessage(value,proto.domopool.Sensors.deserializeBinaryFromReader);
      msg.setSensors(value);
      break;
    case 3:
      var value = new proto.domopool.Global;
      reader.readMessage(value,proto.domopool.Global.deserializeBinaryFromReader);
      msg.setGlobal(value);
      break;
    case 5:
      var value = new proto.domopool.Pump;
      reader.readMessage(value,proto.domopool.Pump.deserializeBinaryFromReader);
      msg.setPump(value);
      break;
    case 6:
      var value = new proto.domopool.Metrics;
      reader.readMessage(value,proto.domopool.Metrics.deserializeBinaryFromReader);
      msg.setMetrics(value);
      break;
    case 7:
      var value = new proto.domopool.States;
      reader.readMessage(value,proto.domopool.States.deserializeBinaryFromReader);
      msg.setStates(value);
      break;
    case 8:
      var value = new proto.domopool.Alarms;
      reader.readMessage(value,proto.domopool.Alarms.deserializeBinaryFromReader);
      msg.setAlarms(value);
      break;
    case 9:
      var value = new proto.domopool.Tests;
      reader.readMessage(value,proto.domopool.Tests.deserializeBinaryFromReader);
      msg.setTests(value);
      break;
    case 10:
      var value = new proto.domopool.Infos;
      reader.readMessage(value,proto.domopool.Infos.deserializeBinaryFromReader);
      msg.setInfos(value);
      break;
    case 11:
      var value = new proto.domopool.Limits;
      reader.readMessage(value,proto.domopool.Limits.deserializeBinaryFromReader);
      msg.setLimits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetwork();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.domopool.Network.serializeBinaryToWriter
    );
  }
  f = message.getSensors();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.domopool.Sensors.serializeBinaryToWriter
    );
  }
  f = message.getGlobal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.domopool.Global.serializeBinaryToWriter
    );
  }
  f = message.getPump();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.domopool.Pump.serializeBinaryToWriter
    );
  }
  f = message.getMetrics();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.domopool.Metrics.serializeBinaryToWriter
    );
  }
  f = message.getStates();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.domopool.States.serializeBinaryToWriter
    );
  }
  f = message.getAlarms();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.domopool.Alarms.serializeBinaryToWriter
    );
  }
  f = message.getTests();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.domopool.Tests.serializeBinaryToWriter
    );
  }
  f = message.getInfos();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.domopool.Infos.serializeBinaryToWriter
    );
  }
  f = message.getLimits();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.domopool.Limits.serializeBinaryToWriter
    );
  }
};


/**
 * optional Network network = 1;
 * @return {?proto.domopool.Network}
 */
proto.domopool.Config.prototype.getNetwork = function() {
  return /** @type{?proto.domopool.Network} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Network, 1));
};


/**
 * @param {?proto.domopool.Network|undefined} value
 * @return {!proto.domopool.Config} returns this
*/
proto.domopool.Config.prototype.setNetwork = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Config} returns this
 */
proto.domopool.Config.prototype.clearNetwork = function() {
  return this.setNetwork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Config.prototype.hasNetwork = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Sensors sensors = 2;
 * @return {?proto.domopool.Sensors}
 */
proto.domopool.Config.prototype.getSensors = function() {
  return /** @type{?proto.domopool.Sensors} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Sensors, 2));
};


/**
 * @param {?proto.domopool.Sensors|undefined} value
 * @return {!proto.domopool.Config} returns this
*/
proto.domopool.Config.prototype.setSensors = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Config} returns this
 */
proto.domopool.Config.prototype.clearSensors = function() {
  return this.setSensors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Config.prototype.hasSensors = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Global global = 3;
 * @return {?proto.domopool.Global}
 */
proto.domopool.Config.prototype.getGlobal = function() {
  return /** @type{?proto.domopool.Global} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Global, 3));
};


/**
 * @param {?proto.domopool.Global|undefined} value
 * @return {!proto.domopool.Config} returns this
*/
proto.domopool.Config.prototype.setGlobal = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Config} returns this
 */
proto.domopool.Config.prototype.clearGlobal = function() {
  return this.setGlobal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Config.prototype.hasGlobal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Pump pump = 5;
 * @return {?proto.domopool.Pump}
 */
proto.domopool.Config.prototype.getPump = function() {
  return /** @type{?proto.domopool.Pump} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Pump, 5));
};


/**
 * @param {?proto.domopool.Pump|undefined} value
 * @return {!proto.domopool.Config} returns this
*/
proto.domopool.Config.prototype.setPump = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Config} returns this
 */
proto.domopool.Config.prototype.clearPump = function() {
  return this.setPump(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Config.prototype.hasPump = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Metrics metrics = 6;
 * @return {?proto.domopool.Metrics}
 */
proto.domopool.Config.prototype.getMetrics = function() {
  return /** @type{?proto.domopool.Metrics} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Metrics, 6));
};


/**
 * @param {?proto.domopool.Metrics|undefined} value
 * @return {!proto.domopool.Config} returns this
*/
proto.domopool.Config.prototype.setMetrics = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Config} returns this
 */
proto.domopool.Config.prototype.clearMetrics = function() {
  return this.setMetrics(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Config.prototype.hasMetrics = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional States states = 7;
 * @return {?proto.domopool.States}
 */
proto.domopool.Config.prototype.getStates = function() {
  return /** @type{?proto.domopool.States} */ (
    jspb.Message.getWrapperField(this, proto.domopool.States, 7));
};


/**
 * @param {?proto.domopool.States|undefined} value
 * @return {!proto.domopool.Config} returns this
*/
proto.domopool.Config.prototype.setStates = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Config} returns this
 */
proto.domopool.Config.prototype.clearStates = function() {
  return this.setStates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Config.prototype.hasStates = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Alarms alarms = 8;
 * @return {?proto.domopool.Alarms}
 */
proto.domopool.Config.prototype.getAlarms = function() {
  return /** @type{?proto.domopool.Alarms} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Alarms, 8));
};


/**
 * @param {?proto.domopool.Alarms|undefined} value
 * @return {!proto.domopool.Config} returns this
*/
proto.domopool.Config.prototype.setAlarms = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Config} returns this
 */
proto.domopool.Config.prototype.clearAlarms = function() {
  return this.setAlarms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Config.prototype.hasAlarms = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Tests tests = 9;
 * @return {?proto.domopool.Tests}
 */
proto.domopool.Config.prototype.getTests = function() {
  return /** @type{?proto.domopool.Tests} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Tests, 9));
};


/**
 * @param {?proto.domopool.Tests|undefined} value
 * @return {!proto.domopool.Config} returns this
*/
proto.domopool.Config.prototype.setTests = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Config} returns this
 */
proto.domopool.Config.prototype.clearTests = function() {
  return this.setTests(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Config.prototype.hasTests = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Infos infos = 10;
 * @return {?proto.domopool.Infos}
 */
proto.domopool.Config.prototype.getInfos = function() {
  return /** @type{?proto.domopool.Infos} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Infos, 10));
};


/**
 * @param {?proto.domopool.Infos|undefined} value
 * @return {!proto.domopool.Config} returns this
*/
proto.domopool.Config.prototype.setInfos = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Config} returns this
 */
proto.domopool.Config.prototype.clearInfos = function() {
  return this.setInfos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Config.prototype.hasInfos = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Limits limits = 11;
 * @return {?proto.domopool.Limits}
 */
proto.domopool.Config.prototype.getLimits = function() {
  return /** @type{?proto.domopool.Limits} */ (
    jspb.Message.getWrapperField(this, proto.domopool.Limits, 11));
};


/**
 * @param {?proto.domopool.Limits|undefined} value
 * @return {!proto.domopool.Config} returns this
*/
proto.domopool.Config.prototype.setLimits = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.domopool.Config} returns this
 */
proto.domopool.Config.prototype.clearLimits = function() {
  return this.setLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.domopool.Config.prototype.hasLimits = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.domopool.Relay.prototype.toObject = function(opt_includeInstance) {
  return proto.domopool.Relay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.domopool.Relay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Relay.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    relay: jspb.Message.getFieldWithDefault(msg, 2, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startTime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.domopool.Relay}
 */
proto.domopool.Relay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.domopool.Relay;
  return proto.domopool.Relay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.domopool.Relay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.domopool.Relay}
 */
proto.domopool.Relay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.domopool.Relay_states} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {!proto.domopool.Relay_names} */ (reader.readEnum());
      msg.setRelay(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDuration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.domopool.Relay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.domopool.Relay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.domopool.Relay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.domopool.Relay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRelay();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional Relay_states state = 1;
 * @return {!proto.domopool.Relay_states}
 */
proto.domopool.Relay.prototype.getState = function() {
  return /** @type {!proto.domopool.Relay_states} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.domopool.Relay_states} value
 * @return {!proto.domopool.Relay} returns this
 */
proto.domopool.Relay.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Relay_names relay = 2;
 * @return {!proto.domopool.Relay_names}
 */
proto.domopool.Relay.prototype.getRelay = function() {
  return /** @type {!proto.domopool.Relay_names} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.domopool.Relay_names} value
 * @return {!proto.domopool.Relay} returns this
 */
proto.domopool.Relay.prototype.setRelay = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 duration = 3;
 * @return {number}
 */
proto.domopool.Relay.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Relay} returns this
 */
proto.domopool.Relay.prototype.setDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 start_time = 4;
 * @return {number}
 */
proto.domopool.Relay.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.domopool.Relay} returns this
 */
proto.domopool.Relay.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.domopool.Relay_states = {
  AUTO: 0,
  START: 1,
  STOP: 2
};

/**
 * @enum {number}
 */
proto.domopool.Relay_names = {
  FILTER: 0,
  CH: 1,
  PH: 2,
  LIGHT: 3
};

goog.object.extend(exports, proto.domopool);
