/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2 */

#ifndef PB_DOMOPOOL_DOMOPOOL_PB_H_INCLUDED
#define PB_DOMOPOOL_DOMOPOOL_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _domopool_Alarms {
    bool filter;
    bool ph;
    bool ch;
    float phVal;
    bool rtc;
    bool storage;
} domopool_Alarms;

typedef struct _domopool_AnalogSensor {
    bool enabled;
    float threshold;
} domopool_AnalogSensor;

typedef struct _domopool_Global {
    uint32_t lcdBacklightDuration;
    uint32_t ackDuration;
    double ackTone;
    bool serialOut;
    bool displayStartup;
} domopool_Global;

typedef struct _domopool_Metrics {
    float tempAmbiant;
    float tempWater;
    float savedTempWater;
    float ph;
    float ch;
    float waterPressure;
    uint32_t over15Duration;
    uint32_t hour;
} domopool_Metrics;

typedef struct _domopool_Mqtt {
    bool enabled;
    char server[128];
} domopool_Mqtt;

typedef struct _domopool_NTP {
    uint32_t dayLight;
    char server[128];
    uint32_t timeZone;
} domopool_NTP;

typedef struct _domopool_Pump {
    bool forceFilter;
    bool forcePH;
    bool forceCH;
    bool automatic;
    bool forceCheck;
    uint32_t forceDuration;
} domopool_Pump;

typedef struct _domopool_States {
    bool startup;
    bool filterOn;
    bool phOn;
    bool chOn;
    bool automatic;
    bool net_active;
    bool ntp;
    bool rtc;
} domopool_States;

typedef struct _domopool_Temp {
    bool enabled;
    bool init;
    pb_size_t addr_count;
    uint32_t addr[8];
} domopool_Temp;

typedef struct _domopool_Tests {
    bool enabled;
    float twater;
    float tamb;
    float ph;
    float pressure;
} domopool_Tests;

typedef struct _domopool_Network {
    bool dhcp;
    char ip[15];
    char netmask[15];
    char gateway[15];
    char dns[15];
    bool allowPost;
    bool has_mqtt;
    domopool_Mqtt mqtt;
    bool has_ntp;
    domopool_NTP ntp;
} domopool_Network;

typedef struct _domopool_Sensors {
    bool has_twin;
    domopool_Temp twin;
    bool has_twout;
    domopool_Temp twout;
    bool has_tamb;
    domopool_Temp tamb;
    bool waitForConversion;
    uint32_t tempResolution;
    bool has_ph;
    domopool_AnalogSensor ph;
    bool has_ch;
    domopool_AnalogSensor ch;
    bool has_waterPressure;
    domopool_AnalogSensor waterPressure;
} domopool_Sensors;

typedef struct _domopool_Config {
    bool has_network;
    domopool_Network network;
    bool has_sensors;
    domopool_Sensors sensors;
    bool has_global;
    domopool_Global global;
    bool has_pump;
    domopool_Pump pump;
    bool has_metrics;
    domopool_Metrics metrics;
    bool has_states;
    domopool_States states;
    bool has_alarms;
    domopool_Alarms alarms;
    bool has_tests;
    domopool_Tests tests;
} domopool_Config;


/* Initializer values for message structs */
#define domopool_NTP_init_default                {0, "", 0}
#define domopool_Mqtt_init_default               {0, ""}
#define domopool_Network_init_default            {0, "", "", "", "", 0, false, domopool_Mqtt_init_default, false, domopool_NTP_init_default}
#define domopool_Temp_init_default               {0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}
#define domopool_AnalogSensor_init_default       {0, 0}
#define domopool_Sensors_init_default            {false, domopool_Temp_init_default, false, domopool_Temp_init_default, false, domopool_Temp_init_default, 0, 0, false, domopool_AnalogSensor_init_default, false, domopool_AnalogSensor_init_default, false, domopool_AnalogSensor_init_default}
#define domopool_Global_init_default             {0, 0, 0, 0, 0}
#define domopool_Pump_init_default               {0, 0, 0, 0, 0, 0}
#define domopool_Alarms_init_default             {0, 0, 0, 0, 0, 0}
#define domopool_Tests_init_default              {0, 0, 0, 0, 0}
#define domopool_Metrics_init_default            {0, 0, 0, 0, 0, 0, 0, 0}
#define domopool_States_init_default             {0, 0, 0, 0, 0, 0, 0, 0}
#define domopool_Config_init_default             {false, domopool_Network_init_default, false, domopool_Sensors_init_default, false, domopool_Global_init_default, false, domopool_Pump_init_default, false, domopool_Metrics_init_default, false, domopool_States_init_default, false, domopool_Alarms_init_default, false, domopool_Tests_init_default}
#define domopool_NTP_init_zero                   {0, "", 0}
#define domopool_Mqtt_init_zero                  {0, ""}
#define domopool_Network_init_zero               {0, "", "", "", "", 0, false, domopool_Mqtt_init_zero, false, domopool_NTP_init_zero}
#define domopool_Temp_init_zero                  {0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0}}
#define domopool_AnalogSensor_init_zero          {0, 0}
#define domopool_Sensors_init_zero               {false, domopool_Temp_init_zero, false, domopool_Temp_init_zero, false, domopool_Temp_init_zero, 0, 0, false, domopool_AnalogSensor_init_zero, false, domopool_AnalogSensor_init_zero, false, domopool_AnalogSensor_init_zero}
#define domopool_Global_init_zero                {0, 0, 0, 0, 0}
#define domopool_Pump_init_zero                  {0, 0, 0, 0, 0, 0}
#define domopool_Alarms_init_zero                {0, 0, 0, 0, 0, 0}
#define domopool_Tests_init_zero                 {0, 0, 0, 0, 0}
#define domopool_Metrics_init_zero               {0, 0, 0, 0, 0, 0, 0, 0}
#define domopool_States_init_zero                {0, 0, 0, 0, 0, 0, 0, 0}
#define domopool_Config_init_zero                {false, domopool_Network_init_zero, false, domopool_Sensors_init_zero, false, domopool_Global_init_zero, false, domopool_Pump_init_zero, false, domopool_Metrics_init_zero, false, domopool_States_init_zero, false, domopool_Alarms_init_zero, false, domopool_Tests_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define domopool_Alarms_filter_tag               1
#define domopool_Alarms_ph_tag                   2
#define domopool_Alarms_ch_tag                   3
#define domopool_Alarms_phVal_tag                4
#define domopool_Alarms_rtc_tag                  5
#define domopool_Alarms_storage_tag              6
#define domopool_AnalogSensor_enabled_tag        1
#define domopool_AnalogSensor_threshold_tag      2
#define domopool_Global_lcdBacklightDuration_tag 1
#define domopool_Global_ackDuration_tag          2
#define domopool_Global_ackTone_tag              3
#define domopool_Global_serialOut_tag            4
#define domopool_Global_displayStartup_tag       5
#define domopool_Metrics_tempAmbiant_tag         1
#define domopool_Metrics_tempWater_tag           2
#define domopool_Metrics_savedTempWater_tag      3
#define domopool_Metrics_ph_tag                  4
#define domopool_Metrics_ch_tag                  5
#define domopool_Metrics_waterPressure_tag       6
#define domopool_Metrics_over15Duration_tag      7
#define domopool_Metrics_hour_tag                8
#define domopool_Mqtt_enabled_tag                1
#define domopool_Mqtt_server_tag                 2
#define domopool_NTP_dayLight_tag                1
#define domopool_NTP_server_tag                  2
#define domopool_NTP_timeZone_tag                3
#define domopool_Pump_forceFilter_tag            1
#define domopool_Pump_forcePH_tag                2
#define domopool_Pump_forceCH_tag                3
#define domopool_Pump_automatic_tag              4
#define domopool_Pump_forceCheck_tag             5
#define domopool_Pump_forceDuration_tag          6
#define domopool_States_startup_tag              1
#define domopool_States_filterOn_tag             2
#define domopool_States_phOn_tag                 3
#define domopool_States_chOn_tag                 4
#define domopool_States_automatic_tag            5
#define domopool_States_net_active_tag           6
#define domopool_States_ntp_tag                  7
#define domopool_States_rtc_tag                  8
#define domopool_Temp_enabled_tag                1
#define domopool_Temp_init_tag                   2
#define domopool_Temp_addr_tag                   3
#define domopool_Tests_enabled_tag               1
#define domopool_Tests_twater_tag                2
#define domopool_Tests_tamb_tag                  3
#define domopool_Tests_ph_tag                    4
#define domopool_Tests_pressure_tag              5
#define domopool_Network_dhcp_tag                1
#define domopool_Network_ip_tag                  2
#define domopool_Network_netmask_tag             3
#define domopool_Network_gateway_tag             4
#define domopool_Network_dns_tag                 5
#define domopool_Network_allowPost_tag           6
#define domopool_Network_mqtt_tag                7
#define domopool_Network_ntp_tag                 8
#define domopool_Sensors_twin_tag                1
#define domopool_Sensors_twout_tag               2
#define domopool_Sensors_tamb_tag                3
#define domopool_Sensors_waitForConversion_tag   4
#define domopool_Sensors_tempResolution_tag      5
#define domopool_Sensors_ph_tag                  6
#define domopool_Sensors_ch_tag                  7
#define domopool_Sensors_waterPressure_tag       8
#define domopool_Config_network_tag              1
#define domopool_Config_sensors_tag              2
#define domopool_Config_global_tag               3
#define domopool_Config_pump_tag                 5
#define domopool_Config_metrics_tag              6
#define domopool_Config_states_tag               7
#define domopool_Config_alarms_tag               8
#define domopool_Config_tests_tag                9

/* Struct field encoding specification for nanopb */
#define domopool_NTP_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   dayLight,          1) \
X(a, STATIC,   SINGULAR, STRING,   server,            2) \
X(a, STATIC,   SINGULAR, UINT32,   timeZone,          3)
#define domopool_NTP_CALLBACK NULL
#define domopool_NTP_DEFAULT NULL

#define domopool_Mqtt_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, STRING,   server,            2)
#define domopool_Mqtt_CALLBACK NULL
#define domopool_Mqtt_DEFAULT NULL

#define domopool_Network_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     dhcp,              1) \
X(a, STATIC,   SINGULAR, STRING,   ip,                2) \
X(a, STATIC,   SINGULAR, STRING,   netmask,           3) \
X(a, STATIC,   SINGULAR, STRING,   gateway,           4) \
X(a, STATIC,   SINGULAR, STRING,   dns,               5) \
X(a, STATIC,   SINGULAR, BOOL,     allowPost,         6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  mqtt,              7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ntp,               8)
#define domopool_Network_CALLBACK NULL
#define domopool_Network_DEFAULT NULL
#define domopool_Network_mqtt_MSGTYPE domopool_Mqtt
#define domopool_Network_ntp_MSGTYPE domopool_NTP

#define domopool_Temp_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, BOOL,     init,              2) \
X(a, STATIC,   REPEATED, UINT32,   addr,              3)
#define domopool_Temp_CALLBACK NULL
#define domopool_Temp_DEFAULT NULL

#define domopool_AnalogSensor_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, FLOAT,    threshold,         2)
#define domopool_AnalogSensor_CALLBACK NULL
#define domopool_AnalogSensor_DEFAULT NULL

#define domopool_Sensors_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  twin,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  twout,             2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tamb,              3) \
X(a, STATIC,   SINGULAR, BOOL,     waitForConversion,   4) \
X(a, STATIC,   SINGULAR, UINT32,   tempResolution,    5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ph,                6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ch,                7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  waterPressure,     8)
#define domopool_Sensors_CALLBACK NULL
#define domopool_Sensors_DEFAULT NULL
#define domopool_Sensors_twin_MSGTYPE domopool_Temp
#define domopool_Sensors_twout_MSGTYPE domopool_Temp
#define domopool_Sensors_tamb_MSGTYPE domopool_Temp
#define domopool_Sensors_ph_MSGTYPE domopool_AnalogSensor
#define domopool_Sensors_ch_MSGTYPE domopool_AnalogSensor
#define domopool_Sensors_waterPressure_MSGTYPE domopool_AnalogSensor

#define domopool_Global_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   lcdBacklightDuration,   1) \
X(a, STATIC,   SINGULAR, UINT32,   ackDuration,       2) \
X(a, STATIC,   SINGULAR, DOUBLE,   ackTone,           3) \
X(a, STATIC,   SINGULAR, BOOL,     serialOut,         4) \
X(a, STATIC,   SINGULAR, BOOL,     displayStartup,    5)
#define domopool_Global_CALLBACK NULL
#define domopool_Global_DEFAULT NULL

#define domopool_Pump_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     forceFilter,       1) \
X(a, STATIC,   SINGULAR, BOOL,     forcePH,           2) \
X(a, STATIC,   SINGULAR, BOOL,     forceCH,           3) \
X(a, STATIC,   SINGULAR, BOOL,     automatic,         4) \
X(a, STATIC,   SINGULAR, BOOL,     forceCheck,        5) \
X(a, STATIC,   SINGULAR, UINT32,   forceDuration,     6)
#define domopool_Pump_CALLBACK NULL
#define domopool_Pump_DEFAULT NULL

#define domopool_Alarms_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     filter,            1) \
X(a, STATIC,   SINGULAR, BOOL,     ph,                2) \
X(a, STATIC,   SINGULAR, BOOL,     ch,                3) \
X(a, STATIC,   SINGULAR, FLOAT,    phVal,             4) \
X(a, STATIC,   SINGULAR, BOOL,     rtc,               5) \
X(a, STATIC,   SINGULAR, BOOL,     storage,           6)
#define domopool_Alarms_CALLBACK NULL
#define domopool_Alarms_DEFAULT NULL

#define domopool_Tests_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   SINGULAR, FLOAT,    twater,            2) \
X(a, STATIC,   SINGULAR, FLOAT,    tamb,              3) \
X(a, STATIC,   SINGULAR, FLOAT,    ph,                4) \
X(a, STATIC,   SINGULAR, FLOAT,    pressure,          5)
#define domopool_Tests_CALLBACK NULL
#define domopool_Tests_DEFAULT NULL

#define domopool_Metrics_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    tempAmbiant,       1) \
X(a, STATIC,   SINGULAR, FLOAT,    tempWater,         2) \
X(a, STATIC,   SINGULAR, FLOAT,    savedTempWater,    3) \
X(a, STATIC,   SINGULAR, FLOAT,    ph,                4) \
X(a, STATIC,   SINGULAR, FLOAT,    ch,                5) \
X(a, STATIC,   SINGULAR, FLOAT,    waterPressure,     6) \
X(a, STATIC,   SINGULAR, UINT32,   over15Duration,    7) \
X(a, STATIC,   SINGULAR, UINT32,   hour,              8)
#define domopool_Metrics_CALLBACK NULL
#define domopool_Metrics_DEFAULT NULL

#define domopool_States_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     startup,           1) \
X(a, STATIC,   SINGULAR, BOOL,     filterOn,          2) \
X(a, STATIC,   SINGULAR, BOOL,     phOn,              3) \
X(a, STATIC,   SINGULAR, BOOL,     chOn,              4) \
X(a, STATIC,   SINGULAR, BOOL,     automatic,         5) \
X(a, STATIC,   SINGULAR, BOOL,     net_active,        6) \
X(a, STATIC,   SINGULAR, BOOL,     ntp,               7) \
X(a, STATIC,   SINGULAR, BOOL,     rtc,               8)
#define domopool_States_CALLBACK NULL
#define domopool_States_DEFAULT NULL

#define domopool_Config_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  network,           1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  sensors,           2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  global,            3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pump,              5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  metrics,           6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  states,            7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  alarms,            8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tests,             9)
#define domopool_Config_CALLBACK NULL
#define domopool_Config_DEFAULT NULL
#define domopool_Config_network_MSGTYPE domopool_Network
#define domopool_Config_sensors_MSGTYPE domopool_Sensors
#define domopool_Config_global_MSGTYPE domopool_Global
#define domopool_Config_pump_MSGTYPE domopool_Pump
#define domopool_Config_metrics_MSGTYPE domopool_Metrics
#define domopool_Config_states_MSGTYPE domopool_States
#define domopool_Config_alarms_MSGTYPE domopool_Alarms
#define domopool_Config_tests_MSGTYPE domopool_Tests

extern const pb_msgdesc_t domopool_NTP_msg;
extern const pb_msgdesc_t domopool_Mqtt_msg;
extern const pb_msgdesc_t domopool_Network_msg;
extern const pb_msgdesc_t domopool_Temp_msg;
extern const pb_msgdesc_t domopool_AnalogSensor_msg;
extern const pb_msgdesc_t domopool_Sensors_msg;
extern const pb_msgdesc_t domopool_Global_msg;
extern const pb_msgdesc_t domopool_Pump_msg;
extern const pb_msgdesc_t domopool_Alarms_msg;
extern const pb_msgdesc_t domopool_Tests_msg;
extern const pb_msgdesc_t domopool_Metrics_msg;
extern const pb_msgdesc_t domopool_States_msg;
extern const pb_msgdesc_t domopool_Config_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define domopool_NTP_fields &domopool_NTP_msg
#define domopool_Mqtt_fields &domopool_Mqtt_msg
#define domopool_Network_fields &domopool_Network_msg
#define domopool_Temp_fields &domopool_Temp_msg
#define domopool_AnalogSensor_fields &domopool_AnalogSensor_msg
#define domopool_Sensors_fields &domopool_Sensors_msg
#define domopool_Global_fields &domopool_Global_msg
#define domopool_Pump_fields &domopool_Pump_msg
#define domopool_Alarms_fields &domopool_Alarms_msg
#define domopool_Tests_fields &domopool_Tests_msg
#define domopool_Metrics_fields &domopool_Metrics_msg
#define domopool_States_fields &domopool_States_msg
#define domopool_Config_fields &domopool_Config_msg

/* Maximum encoded size of messages (where known) */
#define domopool_NTP_size                        142
#define domopool_Mqtt_size                       132
#define domopool_Network_size                    348
#define domopool_Temp_size                       52
#define domopool_AnalogSensor_size               7
#define domopool_Sensors_size                    197
#define domopool_Global_size                     25
#define domopool_Pump_size                       16
#define domopool_Alarms_size                     15
#define domopool_Tests_size                      22
#define domopool_Metrics_size                    42
#define domopool_States_size                     16
#define domopool_Config_size                     699

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
